use std::f32::consts::FRAC_1_SQRT_2;

use cgmath::{self, Vector4};

use hyperplane::Hyperplane;
use polychora::Polychoron::Cell24Rectified;

/// A struct that describes a regular polychoron (4-polytope).
///
/// See: `https://en.wikipedia.org/wiki/4-polytope`
pub struct Definition {
    /// The number of components (i.e. x, y, z, w, ...) per vertex: this should always be 4
    pub components_per_vertex: u32,

    /// The number of vertices per edge: this should always be 2
    pub vertices_per_edge: u32,

    /// The number of vertices per face, i.e. 3 for a polychoron with cells made up of triangular faces
    pub vertices_per_face: u32,

    /// The number of vertices per cell, i.e. 4 for a polychoron made up of tetrahedral cells (like the 16-cell)
    pub vertices_per_cell: u32,

    /// The number of faces per cell, i.e. 8 for a polychoron made up of cube cells (like the 8-cell "tesseract")
    pub faces_per_cell: u32,

    /// The number of cells, i.e. 8 for the 8-cell
    pub cells: u32,
}

/// A polychoron is a polytope that exists in 4-dimensions. It is the 4-dimensional
/// analog of a polyhedron. It is made up of vertices, edges, faces, and cells. Each
/// cell is itself a polyhedra.
///
/// Shape files are (largely) from Paul Bourke's website (see this project's `README`).
/// They are formatted as follows:
///
/// ```
/// number_of_vertices
/// x0 y0 z0 w0
/// x1 y1 z1 w1
/// ...
///
/// number_of_edges
/// v0 v1
/// v2 v3
/// ...
///
/// number_of_faces
/// v0 v1 v2 v3
/// v4 v5 v6 v7
/// ...
///
/// ```
///
/// Reference: `http://paulbourke.net/geometry/hyperspace/`
#[derive(Copy, Clone)]
pub enum Polychoron {
    /// A polytope with 8 cubic cells: the "tesseract"
    Cell8,

    /// A polytope with 16 tetrahedral cells
    Cell16,

    /// A polytope with 24 octahedral cells
    Cell24,

    /// Another construction of the `Cell24` via the rectification of the `Cell16`: this is only
    /// used to calculate the H-representation of the "regular" `Cell24` (even though the 24-cell
    /// is self-dual, a rotation needs to happen before its vertices can be used as cell centers
    /// to find hyperplane boundaries)
    Cell24Rectified,

    /// A polytope with 120 dodecahedral cells
    Cell120,

    /// A polytope with 600 tetrahedral cells
    Cell600,
}

impl Polychoron {
    /// Returns a topological definition corresponding to this polychoron.
    pub fn get_definition(&self) -> Definition {
        match *self {
            Polychoron::Cell8 => Definition {
                components_per_vertex: 4,
                vertices_per_edge: 2,
                vertices_per_face: 4,
                vertices_per_cell: 8,
                faces_per_cell: 6,
                cells: 8,
            },
            Polychoron::Cell16 => Definition {
                components_per_vertex: 4,
                vertices_per_edge: 2,
                vertices_per_face: 3,
                vertices_per_cell: 4,
                faces_per_cell: 4,
                cells: 16,
            },
            Polychoron::Cell24 | Polychoron::Cell24Rectified => Definition {
                components_per_vertex: 4,
                vertices_per_edge: 2,
                vertices_per_face: 3,
                vertices_per_cell: 6,
                faces_per_cell: 8,
                cells: 24,
            },
            Polychoron::Cell120 => Definition {
                components_per_vertex: 4,
                vertices_per_edge: 2,
                vertices_per_face: 5,
                vertices_per_cell: 20,
                faces_per_cell: 12,
                cells: 120,
            },
            Polychoron::Cell600 => Definition {
                components_per_vertex: 4,
                vertices_per_edge: 2,
                vertices_per_face: 3,
                vertices_per_cell: 4,
                faces_per_cell: 4,
                cells: 600,
            },
        }
    }

    /// Returns a list of the unique vertices that make up this polychoron. Note that
    /// all polychora are assumed to have unit radius.
    ///
    /// The Y and Z (2nd and 3rd) coordinates for the vertices of the 600-cell had to
    /// be permuted (switched) from Paul Bourke's original VEF file...not entirely sure
    /// why, yet.
    pub fn get_vertices(&self) -> Vec<Vector4<f32>> {
        match *self {
            Polychoron::Cell8 => vec![
                Vector4::new(-0.5, -0.5, -0.5, -0.5),
                Vector4::new(-0.5, -0.5, -0.5, 0.5),
                Vector4::new(-0.5, -0.5, 0.5, -0.5),
                Vector4::new(-0.5, -0.5, 0.5, 0.5),
                Vector4::new(-0.5, 0.5, -0.5, -0.5),
                Vector4::new(-0.5, 0.5, -0.5, 0.5),
                Vector4::new(-0.5, 0.5, 0.5, -0.5),
                Vector4::new(-0.5, 0.5, 0.5, 0.5),
                Vector4::new(0.5, -0.5, -0.5, -0.5),
                Vector4::new(0.5, -0.5, -0.5, 0.5),
                Vector4::new(0.5, -0.5, 0.5, -0.5),
                Vector4::new(0.5, -0.5, 0.5, 0.5),
                Vector4::new(0.5, 0.5, -0.5, -0.5),
                Vector4::new(0.5, 0.5, -0.5, 0.5),
                Vector4::new(0.5, 0.5, 0.5, -0.5),
                Vector4::new(0.5, 0.5, 0.5, 0.5),
            ],
            Polychoron::Cell16 => vec![
                Vector4::new(-1.0, 0.0, 0.0, 0.0),
                Vector4::new(0.0, -1.0, 0.0, 0.0),
                Vector4::new(0.0, 0.0, -1.0, 0.0),
                Vector4::new(0.0, 0.0, 0.0, -1.0),
                Vector4::new(1.0, 0.0, 0.0, 0.0),
                Vector4::new(0.0, 1.0, 0.0, 0.0),
                Vector4::new(0.0, 0.0, 1.0, 0.0),
                Vector4::new(0.0, 0.0, 0.0, 1.0),
            ],
            Polychoron::Cell24 => vec![
                Vector4::new(-1.0, 0.0, 0.0, 0.0),
                Vector4::new(0.0, -1.0, 0.0, 0.0),
                Vector4::new(0.0, 0.0, -1.0, 0.0),
                Vector4::new(0.0, 0.0, 0.0, -1.0),
                Vector4::new(1.0, 0.0, 0.0, 0.0),
                Vector4::new(0.0, 1.0, 0.0, 0.0),
                Vector4::new(0.0, 0.0, 1.0, 0.0),
                Vector4::new(0.0, 0.0, 0.0, 1.0),
                Vector4::new(-0.5, -0.5, -0.5, -0.5),
                Vector4::new(-0.5, -0.5, -0.5, 0.5),
                Vector4::new(-0.5, -0.5, 0.5, -0.5),
                Vector4::new(-0.5, -0.5, 0.5, 0.5),
                Vector4::new(-0.5, 0.5, -0.5, -0.5),
                Vector4::new(-0.5, 0.5, -0.5, 0.5),
                Vector4::new(-0.5, 0.5, 0.5, -0.5),
                Vector4::new(-0.5, 0.5, 0.5, 0.5),
                Vector4::new(0.5, -0.5, -0.5, -0.5),
                Vector4::new(0.5, -0.5, -0.5, 0.5),
                Vector4::new(0.5, -0.5, 0.5, -0.5),
                Vector4::new(0.5, -0.5, 0.5, 0.5),
                Vector4::new(0.5, 0.5, -0.5, -0.5),
                Vector4::new(0.5, 0.5, -0.5, 0.5),
                Vector4::new(0.5, 0.5, 0.5, -0.5),
                Vector4::new(0.5, 0.5, 0.5, 0.5),
            ],

            Polychoron::Cell24Rectified => vec![
                Vector4::new(FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0, 0.0),
                Vector4::new(FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0, 0.0),
                Vector4::new(0.0, FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.0, -FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.0, FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.0, -FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.0, 0.0, FRAC_1_SQRT_2, FRAC_1_SQRT_2),
                Vector4::new(0.0, 0.0, -FRAC_1_SQRT_2, FRAC_1_SQRT_2),
                Vector4::new(0.0, 0.0, FRAC_1_SQRT_2, -FRAC_1_SQRT_2),
                Vector4::new(0.0, 0.0, -FRAC_1_SQRT_2, -FRAC_1_SQRT_2),
                Vector4::new(0.0, FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2),
                Vector4::new(0.0, -FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2),
                Vector4::new(0.0, FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2),
                Vector4::new(0.0, -FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2),
                Vector4::new(FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2, 0.0),
                Vector4::new(FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(FRAC_1_SQRT_2, 0.0, 0.0, FRAC_1_SQRT_2),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, 0.0, FRAC_1_SQRT_2),
                Vector4::new(FRAC_1_SQRT_2, 0.0, 0.0, -FRAC_1_SQRT_2),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, 0.0, -FRAC_1_SQRT_2),
            ],
            Polychoron::Cell120 => vec![
                Vector4::new(FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0, 0.0), // TODO: use std::f64::consts::FRAC_1_SQRT_2 ?
                Vector4::new(FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0, 0.0),
                Vector4::new(0.0, 0.0, FRAC_1_SQRT_2, FRAC_1_SQRT_2),
                Vector4::new(0.0, 0.0, FRAC_1_SQRT_2, -FRAC_1_SQRT_2),
                Vector4::new(0.0, 0.0, -FRAC_1_SQRT_2, FRAC_1_SQRT_2),
                Vector4::new(0.0, 0.0, -FRAC_1_SQRT_2, -FRAC_1_SQRT_2),
                Vector4::new(0.0, FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2),
                Vector4::new(0.0, FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2),
                Vector4::new(0.0, -FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2),
                Vector4::new(0.0, -FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2),
                Vector4::new(0.0, FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.0, FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.0, -FRAC_1_SQRT_2, FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.0, -FRAC_1_SQRT_2, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(FRAC_1_SQRT_2, 0.0, 0.0, FRAC_1_SQRT_2),
                Vector4::new(FRAC_1_SQRT_2, 0.0, 0.0, -FRAC_1_SQRT_2),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, 0.0, FRAC_1_SQRT_2),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, 0.0, -FRAC_1_SQRT_2),
                Vector4::new(FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2, 0.0),
                Vector4::new(FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, FRAC_1_SQRT_2, 0.0),
                Vector4::new(-FRAC_1_SQRT_2, 0.0, -FRAC_1_SQRT_2, 0.0),
                Vector4::new(0.790569, 0.353553, 0.353553, 0.353553),
                Vector4::new(0.790569, 0.353553, 0.353553, -0.353553),
                Vector4::new(0.790569, 0.353553, -0.353553, 0.353553),
                Vector4::new(0.790569, 0.353553, -0.353553, -0.353553),
                Vector4::new(0.790569, -0.353553, 0.353553, 0.353553),
                Vector4::new(0.790569, -0.353553, 0.353553, -0.353553),
                Vector4::new(0.790569, -0.353553, -0.353553, 0.353553),
                Vector4::new(0.790569, -0.353553, -0.353553, -0.353553),
                Vector4::new(-0.790569, 0.353553, 0.353553, 0.353553),
                Vector4::new(-0.790569, 0.353553, 0.353553, -0.353553),
                Vector4::new(-0.790569, 0.353553, -0.353553, 0.353553),
                Vector4::new(-0.790569, 0.353553, -0.353553, -0.353553),
                Vector4::new(-0.790569, -0.353553, 0.353553, 0.353553),
                Vector4::new(-0.790569, -0.353553, 0.353553, -0.353553),
                Vector4::new(-0.790569, -0.353553, -0.353553, 0.353553),
                Vector4::new(-0.790569, -0.353553, -0.353553, -0.353553),
                Vector4::new(0.353553, 0.353553, 0.353553, 0.790569),
                Vector4::new(0.353553, 0.353553, 0.353553, -0.790569),
                Vector4::new(0.353553, 0.353553, -0.353553, 0.790569),
                Vector4::new(0.353553, 0.353553, -0.353553, -0.790569),
                Vector4::new(0.353553, -0.353553, 0.353553, 0.790569),
                Vector4::new(0.353553, -0.353553, 0.353553, -0.790569),
                Vector4::new(0.353553, -0.353553, -0.353553, 0.790569),
                Vector4::new(0.353553, -0.353553, -0.353553, -0.790569),
                Vector4::new(-0.353553, 0.353553, 0.353553, 0.790569),
                Vector4::new(-0.353553, 0.353553, 0.353553, -0.790569),
                Vector4::new(-0.353553, 0.353553, -0.353553, 0.790569),
                Vector4::new(-0.353553, 0.353553, -0.353553, -0.790569),
                Vector4::new(-0.353553, -0.353553, 0.353553, 0.790569),
                Vector4::new(-0.353553, -0.353553, 0.353553, -0.790569),
                Vector4::new(-0.353553, -0.353553, -0.353553, 0.790569),
                Vector4::new(-0.353553, -0.353553, -0.353553, -0.790569),
                Vector4::new(0.353553, 0.353553, 0.790569, 0.353553),
                Vector4::new(0.353553, 0.353553, 0.790569, -0.353553),
                Vector4::new(0.353553, 0.353553, -0.790569, 0.353553),
                Vector4::new(0.353553, 0.353553, -0.790569, -0.353553),
                Vector4::new(0.353553, -0.353553, 0.790569, 0.353553),
                Vector4::new(0.353553, -0.353553, 0.790569, -0.353553),
                Vector4::new(0.353553, -0.353553, -0.790569, 0.353553),
                Vector4::new(0.353553, -0.353553, -0.790569, -0.353553),
                Vector4::new(-0.353553, 0.353553, 0.790569, 0.353553),
                Vector4::new(-0.353553, 0.353553, 0.790569, -0.353553),
                Vector4::new(-0.353553, 0.353553, -0.790569, 0.353553),
                Vector4::new(-0.353553, 0.353553, -0.790569, -0.353553),
                Vector4::new(-0.353553, -0.353553, 0.790569, 0.353553),
                Vector4::new(-0.353553, -0.353553, 0.790569, -0.353553),
                Vector4::new(-0.353553, -0.353553, -0.790569, 0.353553),
                Vector4::new(-0.353553, -0.353553, -0.790569, -0.353553),
                Vector4::new(0.353553, 0.790569, 0.353553, 0.353553),
                Vector4::new(0.353553, 0.790569, 0.353553, -0.353553),
                Vector4::new(0.353553, 0.790569, -0.353553, 0.353553),
                Vector4::new(0.353553, 0.790569, -0.353553, -0.353553),
                Vector4::new(0.353553, -0.790569, 0.353553, 0.353553),
                Vector4::new(0.353553, -0.790569, 0.353553, -0.353553),
                Vector4::new(0.353553, -0.790569, -0.353553, 0.353553),
                Vector4::new(0.353553, -0.790569, -0.353553, -0.353553),
                Vector4::new(-0.353553, 0.790569, 0.353553, 0.353553),
                Vector4::new(-0.353553, 0.790569, 0.353553, -0.353553),
                Vector4::new(-0.353553, 0.790569, -0.353553, 0.353553),
                Vector4::new(-0.353553, 0.790569, -0.353553, -0.353553),
                Vector4::new(-0.353553, -0.790569, 0.353553, 0.353553),
                Vector4::new(-0.353553, -0.790569, 0.353553, -0.353553),
                Vector4::new(-0.353553, -0.790569, -0.353553, 0.353553),
                Vector4::new(-0.353553, -0.790569, -0.353553, -0.353553),
                Vector4::new(0.572061, 0.572061, 0.572061, 0.135045),
                Vector4::new(0.572061, 0.572061, 0.572061, -0.135045),
                Vector4::new(0.572061, 0.572061, -0.572061, 0.135045),
                Vector4::new(0.572061, 0.572061, -0.572061, -0.135045),
                Vector4::new(0.572061, -0.572061, 0.572061, 0.135045),
                Vector4::new(0.572061, -0.572061, 0.572061, -0.135045),
                Vector4::new(0.572061, -0.572061, -0.572061, 0.135045),
                Vector4::new(0.572061, -0.572061, -0.572061, -0.135045),
                Vector4::new(-0.572061, 0.572061, 0.572061, 0.135045),
                Vector4::new(-0.572061, 0.572061, 0.572061, -0.135045),
                Vector4::new(-0.572061, 0.572061, -0.572061, 0.135045),
                Vector4::new(-0.572061, 0.572061, -0.572061, -0.135045),
                Vector4::new(-0.572061, -0.572061, 0.572061, 0.135045),
                Vector4::new(-0.572061, -0.572061, 0.572061, -0.135045),
                Vector4::new(-0.572061, -0.572061, -0.572061, 0.135045),
                Vector4::new(-0.572061, -0.572061, -0.572061, -0.135045),
                Vector4::new(0.135045, 0.572061, 0.572061, 0.572061),
                Vector4::new(0.135045, 0.572061, 0.572061, -0.572061),
                Vector4::new(0.135045, 0.572061, -0.572061, 0.572061),
                Vector4::new(0.135045, 0.572061, -0.572061, -0.572061),
                Vector4::new(0.135045, -0.572061, 0.572061, 0.572061),
                Vector4::new(0.135045, -0.572061, 0.572061, -0.572061),
                Vector4::new(0.135045, -0.572061, -0.572061, 0.572061),
                Vector4::new(0.135045, -0.572061, -0.572061, -0.572061),
                Vector4::new(-0.135045, 0.572061, 0.572061, 0.572061),
                Vector4::new(-0.135045, 0.572061, 0.572061, -0.572061),
                Vector4::new(-0.135045, 0.572061, -0.572061, 0.572061),
                Vector4::new(-0.135045, 0.572061, -0.572061, -0.572061),
                Vector4::new(-0.135045, -0.572061, 0.572061, 0.572061),
                Vector4::new(-0.135045, -0.572061, 0.572061, -0.572061),
                Vector4::new(-0.135045, -0.572061, -0.572061, 0.572061),
                Vector4::new(-0.135045, -0.572061, -0.572061, -0.572061),
                Vector4::new(0.572061, 0.135045, 0.572061, 0.572061),
                Vector4::new(0.572061, 0.135045, 0.572061, -0.572061),
                Vector4::new(0.572061, 0.135045, -0.572061, 0.572061),
                Vector4::new(0.572061, 0.135045, -0.572061, -0.572061),
                Vector4::new(0.572061, -0.135045, 0.572061, 0.572061),
                Vector4::new(0.572061, -0.135045, 0.572061, -0.572061),
                Vector4::new(0.572061, -0.135045, -0.572061, 0.572061),
                Vector4::new(0.572061, -0.135045, -0.572061, -0.572061),
                Vector4::new(-0.572061, 0.135045, 0.572061, 0.572061),
                Vector4::new(-0.572061, 0.135045, 0.572061, -0.572061),
                Vector4::new(-0.572061, 0.135045, -0.572061, 0.572061),
                Vector4::new(-0.572061, 0.135045, -0.572061, -0.572061),
                Vector4::new(-0.572061, -0.135045, 0.572061, 0.572061),
                Vector4::new(-0.572061, -0.135045, 0.572061, -0.572061),
                Vector4::new(-0.572061, -0.135045, -0.572061, 0.572061),
                Vector4::new(-0.572061, -0.135045, -0.572061, -0.572061),
                Vector4::new(0.572061, 0.572061, 0.135045, 0.572061),
                Vector4::new(0.572061, 0.572061, 0.135045, -0.572061),
                Vector4::new(0.572061, 0.572061, -0.135045, 0.572061),
                Vector4::new(0.572061, 0.572061, -0.135045, -0.572061),
                Vector4::new(0.572061, -0.572061, 0.135045, 0.572061),
                Vector4::new(0.572061, -0.572061, 0.135045, -0.572061),
                Vector4::new(0.572061, -0.572061, -0.135045, 0.572061),
                Vector4::new(0.572061, -0.572061, -0.135045, -0.572061),
                Vector4::new(-0.572061, 0.572061, 0.135045, 0.572061),
                Vector4::new(-0.572061, 0.572061, 0.135045, -0.572061),
                Vector4::new(-0.572061, 0.572061, -0.135045, 0.572061),
                Vector4::new(-0.572061, 0.572061, -0.135045, -0.572061),
                Vector4::new(-0.572061, -0.572061, 0.135045, 0.572061),
                Vector4::new(-0.572061, -0.572061, 0.135045, -0.572061),
                Vector4::new(-0.572061, -0.572061, -0.135045, 0.572061),
                Vector4::new(-0.572061, -0.572061, -0.135045, -0.572061),
                Vector4::new(0.925615, 0.218508, 0.218508, 0.218508),
                Vector4::new(0.925615, 0.218508, 0.218508, -0.218508),
                Vector4::new(0.925615, 0.218508, -0.218508, 0.218508),
                Vector4::new(0.925615, 0.218508, -0.218508, -0.218508),
                Vector4::new(0.925615, -0.218508, 0.218508, 0.218508),
                Vector4::new(0.925615, -0.218508, 0.218508, -0.218508),
                Vector4::new(0.925615, -0.218508, -0.218508, 0.218508),
                Vector4::new(0.925615, -0.218508, -0.218508, -0.218508),
                Vector4::new(-0.925615, 0.218508, 0.218508, 0.218508),
                Vector4::new(-0.925615, 0.218508, 0.218508, -0.218508),
                Vector4::new(-0.925615, 0.218508, -0.218508, 0.218508),
                Vector4::new(-0.925615, 0.218508, -0.218508, -0.218508),
                Vector4::new(-0.925615, -0.218508, 0.218508, 0.218508),
                Vector4::new(-0.925615, -0.218508, 0.218508, -0.218508),
                Vector4::new(-0.925615, -0.218508, -0.218508, 0.218508),
                Vector4::new(-0.925615, -0.218508, -0.218508, -0.218508),
                Vector4::new(0.218508, 0.218508, 0.218508, 0.925615),
                Vector4::new(0.218508, 0.218508, 0.218508, -0.925615),
                Vector4::new(0.218508, 0.218508, -0.218508, 0.925615),
                Vector4::new(0.218508, 0.218508, -0.218508, -0.925615),
                Vector4::new(0.218508, -0.218508, 0.218508, 0.925615),
                Vector4::new(0.218508, -0.218508, 0.218508, -0.925615),
                Vector4::new(0.218508, -0.218508, -0.218508, 0.925615),
                Vector4::new(0.218508, -0.218508, -0.218508, -0.925615),
                Vector4::new(-0.218508, 0.218508, 0.218508, 0.925615),
                Vector4::new(-0.218508, 0.218508, 0.218508, -0.925615),
                Vector4::new(-0.218508, 0.218508, -0.218508, 0.925615),
                Vector4::new(-0.218508, 0.218508, -0.218508, -0.925615),
                Vector4::new(-0.218508, -0.218508, 0.218508, 0.925615),
                Vector4::new(-0.218508, -0.218508, 0.218508, -0.925615),
                Vector4::new(-0.218508, -0.218508, -0.218508, 0.925615),
                Vector4::new(-0.218508, -0.218508, -0.218508, -0.925615),
                Vector4::new(0.218508, 0.218508, 0.925615, 0.218508),
                Vector4::new(0.218508, 0.218508, 0.925615, -0.218508),
                Vector4::new(0.218508, 0.218508, -0.925615, 0.218508),
                Vector4::new(0.218508, 0.218508, -0.925615, -0.218508),
                Vector4::new(0.218508, -0.218508, 0.925615, 0.218508),
                Vector4::new(0.218508, -0.218508, 0.925615, -0.218508),
                Vector4::new(0.218508, -0.218508, -0.925615, 0.218508),
                Vector4::new(0.218508, -0.218508, -0.925615, -0.218508),
                Vector4::new(-0.218508, 0.218508, 0.925615, 0.218508),
                Vector4::new(-0.218508, 0.218508, 0.925615, -0.218508),
                Vector4::new(-0.218508, 0.218508, -0.925615, 0.218508),
                Vector4::new(-0.218508, 0.218508, -0.925615, -0.218508),
                Vector4::new(-0.218508, -0.218508, 0.925615, 0.218508),
                Vector4::new(-0.218508, -0.218508, 0.925615, -0.218508),
                Vector4::new(-0.218508, -0.218508, -0.925615, 0.218508),
                Vector4::new(-0.218508, -0.218508, -0.925615, -0.218508),
                Vector4::new(0.218508, 0.925615, 0.218508, 0.218508),
                Vector4::new(0.218508, 0.925615, 0.218508, -0.218508),
                Vector4::new(0.218508, 0.925615, -0.218508, 0.218508),
                Vector4::new(0.218508, 0.925615, -0.218508, -0.218508),
                Vector4::new(0.218508, -0.925615, 0.218508, 0.218508),
                Vector4::new(0.218508, -0.925615, 0.218508, -0.218508),
                Vector4::new(0.218508, -0.925615, -0.218508, 0.218508),
                Vector4::new(0.218508, -0.925615, -0.218508, -0.218508),
                Vector4::new(-0.218508, 0.925615, 0.218508, 0.218508),
                Vector4::new(-0.218508, 0.925615, 0.218508, -0.218508),
                Vector4::new(-0.218508, 0.925615, -0.218508, 0.218508),
                Vector4::new(-0.218508, 0.925615, -0.218508, -0.218508),
                Vector4::new(-0.218508, -0.925615, 0.218508, 0.218508),
                Vector4::new(-0.218508, -0.925615, 0.218508, -0.218508),
                Vector4::new(-0.218508, -0.925615, -0.218508, 0.218508),
                Vector4::new(-0.218508, -0.925615, -0.218508, -0.218508),
                Vector4::new(0.925615, 0.135045, 0.353553, 0.0),
                Vector4::new(0.925615, 0.135045, -0.353553, 0.0),
                Vector4::new(0.925615, -0.135045, 0.353553, 0.0),
                Vector4::new(0.925615, -0.135045, -0.353553, 0.0),
                Vector4::new(-0.925615, 0.135045, 0.353553, 0.0),
                Vector4::new(-0.925615, 0.135045, -0.353553, 0.0),
                Vector4::new(-0.925615, -0.135045, 0.353553, 0.0),
                Vector4::new(-0.925615, -0.135045, -0.353553, 0.0),
                Vector4::new(0.925615, 0.353553, 0.0, 0.135045),
                Vector4::new(0.925615, 0.353553, 0.0, -0.135045),
                Vector4::new(0.925615, -0.353553, 0.0, 0.135045),
                Vector4::new(0.925615, -0.353553, 0.0, -0.135045),
                Vector4::new(-0.925615, 0.353553, 0.0, 0.135045),
                Vector4::new(-0.925615, 0.353553, 0.0, -0.135045),
                Vector4::new(-0.925615, -0.353553, 0.0, 0.135045),
                Vector4::new(-0.925615, -0.353553, 0.0, -0.135045),
                Vector4::new(0.0, 0.135045, 0.925615, 0.353553),
                Vector4::new(0.0, 0.135045, 0.925615, -0.353553),
                Vector4::new(0.0, 0.135045, -0.925615, 0.353553),
                Vector4::new(0.0, 0.135045, -0.925615, -0.353553),
                Vector4::new(0.0, -0.135045, 0.925615, 0.353553),
                Vector4::new(0.0, -0.135045, 0.925615, -0.353553),
                Vector4::new(0.0, -0.135045, -0.925615, 0.353553),
                Vector4::new(0.0, -0.135045, -0.925615, -0.353553),
                Vector4::new(0.0, 0.353553, 0.135045, 0.925615),
                Vector4::new(0.0, 0.353553, 0.135045, -0.925615),
                Vector4::new(0.0, 0.353553, -0.135045, 0.925615),
                Vector4::new(0.0, 0.353553, -0.135045, -0.925615),
                Vector4::new(0.0, -0.353553, 0.135045, 0.925615),
                Vector4::new(0.0, -0.353553, 0.135045, -0.925615),
                Vector4::new(0.0, -0.353553, -0.135045, 0.925615),
                Vector4::new(0.0, -0.353553, -0.135045, -0.925615),
                Vector4::new(0.0, 0.925615, 0.353553, 0.135045),
                Vector4::new(0.0, 0.925615, 0.353553, -0.135045),
                Vector4::new(0.0, 0.925615, -0.353553, 0.135045),
                Vector4::new(0.0, 0.925615, -0.353553, -0.135045),
                Vector4::new(0.0, -0.925615, 0.353553, 0.135045),
                Vector4::new(0.0, -0.925615, 0.353553, -0.135045),
                Vector4::new(0.0, -0.925615, -0.353553, 0.135045),
                Vector4::new(0.0, -0.925615, -0.353553, -0.135045),
                Vector4::new(0.135045, 0.0, 0.353553, 0.925615),
                Vector4::new(0.135045, 0.0, 0.353553, -0.925615),
                Vector4::new(0.135045, 0.0, -0.353553, 0.925615),
                Vector4::new(0.135045, 0.0, -0.353553, -0.925615),
                Vector4::new(-0.135045, 0.0, 0.353553, 0.925615),
                Vector4::new(-0.135045, 0.0, 0.353553, -0.925615),
                Vector4::new(-0.135045, 0.0, -0.353553, 0.925615),
                Vector4::new(-0.135045, 0.0, -0.353553, -0.925615),
                Vector4::new(0.135045, 0.353553, 0.925615, 0.0),
                Vector4::new(0.135045, 0.353553, -0.925615, 0.0),
                Vector4::new(0.135045, -0.353553, 0.925615, 0.0),
                Vector4::new(0.135045, -0.353553, -0.925615, 0.0),
                Vector4::new(-0.135045, 0.353553, 0.925615, 0.0),
                Vector4::new(-0.135045, 0.353553, -0.925615, 0.0),
                Vector4::new(-0.135045, -0.353553, 0.925615, 0.0),
                Vector4::new(-0.135045, -0.353553, -0.925615, 0.0),
                Vector4::new(0.135045, 0.925615, 0.0, 0.353553),
                Vector4::new(0.135045, 0.925615, 0.0, -0.353553),
                Vector4::new(0.135045, -0.925615, 0.0, 0.353553),
                Vector4::new(0.135045, -0.925615, 0.0, -0.353553),
                Vector4::new(-0.135045, 0.925615, 0.0, 0.353553),
                Vector4::new(-0.135045, 0.925615, 0.0, -0.353553),
                Vector4::new(-0.135045, -0.925615, 0.0, 0.353553),
                Vector4::new(-0.135045, -0.925615, 0.0, -0.353553),
                Vector4::new(0.353553, 0.0, 0.925615, 0.135045),
                Vector4::new(0.353553, 0.0, 0.925615, -0.135045),
                Vector4::new(0.353553, 0.0, -0.925615, 0.135045),
                Vector4::new(0.353553, 0.0, -0.925615, -0.135045),
                Vector4::new(-0.353553, 0.0, 0.925615, 0.135045),
                Vector4::new(-0.353553, 0.0, 0.925615, -0.135045),
                Vector4::new(-0.353553, 0.0, -0.925615, 0.135045),
                Vector4::new(-0.353553, 0.0, -0.925615, -0.135045),
                Vector4::new(0.353553, 0.135045, 0.0, 0.925615),
                Vector4::new(0.353553, 0.135045, 0.0, -0.925615),
                Vector4::new(0.353553, -0.135045, 0.0, 0.925615),
                Vector4::new(0.353553, -0.135045, 0.0, -0.925615),
                Vector4::new(-0.353553, 0.135045, 0.0, 0.925615),
                Vector4::new(-0.353553, 0.135045, 0.0, -0.925615),
                Vector4::new(-0.353553, -0.135045, 0.0, 0.925615),
                Vector4::new(-0.353553, -0.135045, 0.0, -0.925615),
                Vector4::new(0.353553, 0.925615, 0.135045, 0.0),
                Vector4::new(0.353553, 0.925615, -0.135045, 0.0),
                Vector4::new(0.353553, -0.925615, 0.135045, 0.0),
                Vector4::new(0.353553, -0.925615, -0.135045, 0.0),
                Vector4::new(-0.353553, 0.925615, 0.135045, 0.0),
                Vector4::new(-0.353553, 0.925615, -0.135045, 0.0),
                Vector4::new(-0.353553, -0.925615, 0.135045, 0.0),
                Vector4::new(-0.353553, -0.925615, -0.135045, 0.0),
                Vector4::new(0.925615, 0.0, 0.135045, 0.353553),
                Vector4::new(0.925615, 0.0, 0.135045, -0.353553),
                Vector4::new(0.925615, 0.0, -0.135045, 0.353553),
                Vector4::new(0.925615, 0.0, -0.135045, -0.353553),
                Vector4::new(-0.925615, 0.0, 0.135045, 0.353553),
                Vector4::new(-0.925615, 0.0, 0.135045, -0.353553),
                Vector4::new(-0.925615, 0.0, -0.135045, 0.353553),
                Vector4::new(-0.925615, 0.0, -0.135045, -0.353553),
                Vector4::new(0.790569, 0.218508, 0.572061, 0.0),
                Vector4::new(0.790569, 0.218508, -0.572061, 0.0),
                Vector4::new(0.790569, -0.218508, 0.572061, 0.0),
                Vector4::new(0.790569, -0.218508, -0.572061, 0.0),
                Vector4::new(-0.790569, 0.218508, 0.572061, 0.0),
                Vector4::new(-0.790569, 0.218508, -0.572061, 0.0),
                Vector4::new(-0.790569, -0.218508, 0.572061, 0.0),
                Vector4::new(-0.790569, -0.218508, -0.572061, 0.0),
                Vector4::new(0.790569, 0.572061, 0.0, 0.218508),
                Vector4::new(0.790569, 0.572061, 0.0, -0.218508),
                Vector4::new(0.790569, -0.572061, 0.0, 0.218508),
                Vector4::new(0.790569, -0.572061, 0.0, -0.218508),
                Vector4::new(-0.790569, 0.572061, 0.0, 0.218508),
                Vector4::new(-0.790569, 0.572061, 0.0, -0.218508),
                Vector4::new(-0.790569, -0.572061, 0.0, 0.218508),
                Vector4::new(-0.790569, -0.572061, 0.0, -0.218508),
                Vector4::new(0.0, 0.218508, 0.790569, 0.572061),
                Vector4::new(0.0, 0.218508, 0.790569, -0.572061),
                Vector4::new(0.0, 0.218508, -0.790569, 0.572061),
                Vector4::new(0.0, 0.218508, -0.790569, -0.572061),
                Vector4::new(0.0, -0.218508, 0.790569, 0.572061),
                Vector4::new(0.0, -0.218508, 0.790569, -0.572061),
                Vector4::new(0.0, -0.218508, -0.790569, 0.572061),
                Vector4::new(0.0, -0.218508, -0.790569, -0.572061),
                Vector4::new(0.0, 0.572061, 0.218508, 0.790569),
                Vector4::new(0.0, 0.572061, 0.218508, -0.790569),
                Vector4::new(0.0, 0.572061, -0.218508, 0.790569),
                Vector4::new(0.0, 0.572061, -0.218508, -0.790569),
                Vector4::new(0.0, -0.572061, 0.218508, 0.790569),
                Vector4::new(0.0, -0.572061, 0.218508, -0.790569),
                Vector4::new(0.0, -0.572061, -0.218508, 0.790569),
                Vector4::new(0.0, -0.572061, -0.218508, -0.790569),
                Vector4::new(0.0, 0.790569, 0.572061, 0.218508),
                Vector4::new(0.0, 0.790569, 0.572061, -0.218508),
                Vector4::new(0.0, 0.790569, -0.572061, 0.218508),
                Vector4::new(0.0, 0.790569, -0.572061, -0.218508),
                Vector4::new(0.0, -0.790569, 0.572061, 0.218508),
                Vector4::new(0.0, -0.790569, 0.572061, -0.218508),
                Vector4::new(0.0, -0.790569, -0.572061, 0.218508),
                Vector4::new(0.0, -0.790569, -0.572061, -0.218508),
                Vector4::new(0.218508, 0.0, 0.572061, 0.790569),
                Vector4::new(0.218508, 0.0, 0.572061, -0.790569),
                Vector4::new(0.218508, 0.0, -0.572061, 0.790569),
                Vector4::new(0.218508, 0.0, -0.572061, -0.790569),
                Vector4::new(-0.218508, 0.0, 0.572061, 0.790569),
                Vector4::new(-0.218508, 0.0, 0.572061, -0.790569),
                Vector4::new(-0.218508, 0.0, -0.572061, 0.790569),
                Vector4::new(-0.218508, 0.0, -0.572061, -0.790569),
                Vector4::new(0.218508, 0.572061, 0.790569, 0.0),
                Vector4::new(0.218508, 0.572061, -0.790569, 0.0),
                Vector4::new(0.218508, -0.572061, 0.790569, 0.0),
                Vector4::new(0.218508, -0.572061, -0.790569, 0.0),
                Vector4::new(-0.218508, 0.572061, 0.790569, 0.0),
                Vector4::new(-0.218508, 0.572061, -0.790569, 0.0),
                Vector4::new(-0.218508, -0.572061, 0.790569, 0.0),
                Vector4::new(-0.218508, -0.572061, -0.790569, 0.0),
                Vector4::new(0.218508, 0.790569, 0.0, 0.572061),
                Vector4::new(0.218508, 0.790569, 0.0, -0.572061),
                Vector4::new(0.218508, -0.790569, 0.0, 0.572061),
                Vector4::new(0.218508, -0.790569, 0.0, -0.572061),
                Vector4::new(-0.218508, 0.790569, 0.0, 0.572061),
                Vector4::new(-0.218508, 0.790569, 0.0, -0.572061),
                Vector4::new(-0.218508, -0.790569, 0.0, 0.572061),
                Vector4::new(-0.218508, -0.790569, 0.0, -0.572061),
                Vector4::new(0.572061, 0.0, 0.790569, 0.218508),
                Vector4::new(0.572061, 0.0, 0.790569, -0.218508),
                Vector4::new(0.572061, 0.0, -0.790569, 0.218508),
                Vector4::new(0.572061, 0.0, -0.790569, -0.218508),
                Vector4::new(-0.572061, 0.0, 0.790569, 0.218508),
                Vector4::new(-0.572061, 0.0, 0.790569, -0.218508),
                Vector4::new(-0.572061, 0.0, -0.790569, 0.218508),
                Vector4::new(-0.572061, 0.0, -0.790569, -0.218508),
                Vector4::new(0.572061, 0.218508, 0.0, 0.790569),
                Vector4::new(0.572061, 0.218508, 0.0, -0.790569),
                Vector4::new(0.572061, -0.218508, 0.0, 0.790569),
                Vector4::new(0.572061, -0.218508, 0.0, -0.790569),
                Vector4::new(-0.572061, 0.218508, 0.0, 0.790569),
                Vector4::new(-0.572061, 0.218508, 0.0, -0.790569),
                Vector4::new(-0.572061, -0.218508, 0.0, 0.790569),
                Vector4::new(-0.572061, -0.218508, 0.0, -0.790569),
                Vector4::new(0.572061, 0.790569, 0.218508, 0.0),
                Vector4::new(0.572061, 0.790569, -0.218508, 0.0),
                Vector4::new(0.572061, -0.790569, 0.218508, 0.0),
                Vector4::new(0.572061, -0.790569, -0.218508, 0.0),
                Vector4::new(-0.572061, 0.790569, 0.218508, 0.0),
                Vector4::new(-0.572061, 0.790569, -0.218508, 0.0),
                Vector4::new(-0.572061, -0.790569, 0.218508, 0.0),
                Vector4::new(-0.572061, -0.790569, -0.218508, 0.0),
                Vector4::new(0.790569, 0.0, 0.218508, 0.572061),
                Vector4::new(0.790569, 0.0, 0.218508, -0.572061),
                Vector4::new(0.790569, 0.0, -0.218508, 0.572061),
                Vector4::new(0.790569, 0.0, -0.218508, -0.572061),
                Vector4::new(-0.790569, 0.0, 0.218508, 0.572061),
                Vector4::new(-0.790569, 0.0, 0.218508, -0.572061),
                Vector4::new(-0.790569, 0.0, -0.218508, 0.572061),
                Vector4::new(-0.790569, 0.0, -0.218508, -0.572061),
                Vector4::new(FRAC_1_SQRT_2, 0.353553, 0.572061, 0.218508),
                Vector4::new(FRAC_1_SQRT_2, 0.353553, 0.572061, -0.218508),
                Vector4::new(FRAC_1_SQRT_2, 0.353553, -0.572061, 0.218508),
                Vector4::new(FRAC_1_SQRT_2, 0.353553, -0.572061, -0.218508),
                Vector4::new(FRAC_1_SQRT_2, -0.353553, 0.572061, 0.218508),
                Vector4::new(FRAC_1_SQRT_2, -0.353553, 0.572061, -0.218508),
                Vector4::new(FRAC_1_SQRT_2, -0.353553, -0.572061, 0.218508),
                Vector4::new(FRAC_1_SQRT_2, -0.353553, -0.572061, -0.218508),
                Vector4::new(-FRAC_1_SQRT_2, 0.353553, 0.572061, 0.218508),
                Vector4::new(-FRAC_1_SQRT_2, 0.353553, 0.572061, -0.218508),
                Vector4::new(-FRAC_1_SQRT_2, 0.353553, -0.572061, 0.218508),
                Vector4::new(-FRAC_1_SQRT_2, 0.353553, -0.572061, -0.218508),
                Vector4::new(-FRAC_1_SQRT_2, -0.353553, 0.572061, 0.218508),
                Vector4::new(-FRAC_1_SQRT_2, -0.353553, 0.572061, -0.218508),
                Vector4::new(-FRAC_1_SQRT_2, -0.353553, -0.572061, 0.218508),
                Vector4::new(-FRAC_1_SQRT_2, -0.353553, -0.572061, -0.218508),
                Vector4::new(FRAC_1_SQRT_2, 0.572061, 0.218508, 0.353553),
                Vector4::new(FRAC_1_SQRT_2, 0.572061, 0.218508, -0.353553),
                Vector4::new(FRAC_1_SQRT_2, 0.572061, -0.218508, 0.353553),
                Vector4::new(FRAC_1_SQRT_2, 0.572061, -0.218508, -0.353553),
                Vector4::new(FRAC_1_SQRT_2, -0.572061, 0.218508, 0.353553),
                Vector4::new(FRAC_1_SQRT_2, -0.572061, 0.218508, -0.353553),
                Vector4::new(FRAC_1_SQRT_2, -0.572061, -0.218508, 0.353553),
                Vector4::new(FRAC_1_SQRT_2, -0.572061, -0.218508, -0.353553),
                Vector4::new(-FRAC_1_SQRT_2, 0.572061, 0.218508, 0.353553),
                Vector4::new(-FRAC_1_SQRT_2, 0.572061, 0.218508, -0.353553),
                Vector4::new(-FRAC_1_SQRT_2, 0.572061, -0.218508, 0.353553),
                Vector4::new(-FRAC_1_SQRT_2, 0.572061, -0.218508, -0.353553),
                Vector4::new(-FRAC_1_SQRT_2, -0.572061, 0.218508, 0.353553),
                Vector4::new(-FRAC_1_SQRT_2, -0.572061, 0.218508, -0.353553),
                Vector4::new(-FRAC_1_SQRT_2, -0.572061, -0.218508, 0.353553),
                Vector4::new(-FRAC_1_SQRT_2, -0.572061, -0.218508, -0.353553),
                Vector4::new(0.218508, 0.353553, FRAC_1_SQRT_2, 0.572061),
                Vector4::new(0.218508, 0.353553, FRAC_1_SQRT_2, -0.572061),
                Vector4::new(0.218508, 0.353553, -FRAC_1_SQRT_2, 0.572061),
                Vector4::new(0.218508, 0.353553, -FRAC_1_SQRT_2, -0.572061),
                Vector4::new(0.218508, -0.353553, FRAC_1_SQRT_2, 0.572061),
                Vector4::new(0.218508, -0.353553, FRAC_1_SQRT_2, -0.572061),
                Vector4::new(0.218508, -0.353553, -FRAC_1_SQRT_2, 0.572061),
                Vector4::new(0.218508, -0.353553, -FRAC_1_SQRT_2, -0.572061),
                Vector4::new(-0.218508, 0.353553, FRAC_1_SQRT_2, 0.572061),
                Vector4::new(-0.218508, 0.353553, FRAC_1_SQRT_2, -0.572061),
                Vector4::new(-0.218508, 0.353553, -FRAC_1_SQRT_2, 0.572061),
                Vector4::new(-0.218508, 0.353553, -FRAC_1_SQRT_2, -0.572061),
                Vector4::new(-0.218508, -0.353553, FRAC_1_SQRT_2, 0.572061),
                Vector4::new(-0.218508, -0.353553, FRAC_1_SQRT_2, -0.572061),
                Vector4::new(-0.218508, -0.353553, -FRAC_1_SQRT_2, 0.572061),
                Vector4::new(-0.218508, -0.353553, -FRAC_1_SQRT_2, -0.572061),
                Vector4::new(0.218508, 0.572061, 0.353553, FRAC_1_SQRT_2),
                Vector4::new(0.218508, 0.572061, 0.353553, -FRAC_1_SQRT_2),
                Vector4::new(0.218508, 0.572061, -0.353553, FRAC_1_SQRT_2),
                Vector4::new(0.218508, 0.572061, -0.353553, -FRAC_1_SQRT_2),
                Vector4::new(0.218508, -0.572061, 0.353553, FRAC_1_SQRT_2),
                Vector4::new(0.218508, -0.572061, 0.353553, -FRAC_1_SQRT_2),
                Vector4::new(0.218508, -0.572061, -0.353553, FRAC_1_SQRT_2),
                Vector4::new(0.218508, -0.572061, -0.353553, -FRAC_1_SQRT_2),
                Vector4::new(-0.218508, 0.572061, 0.353553, FRAC_1_SQRT_2),
                Vector4::new(-0.218508, 0.572061, 0.353553, -FRAC_1_SQRT_2),
                Vector4::new(-0.218508, 0.572061, -0.353553, FRAC_1_SQRT_2),
                Vector4::new(-0.218508, 0.572061, -0.353553, -FRAC_1_SQRT_2),
                Vector4::new(-0.218508, -0.572061, 0.353553, FRAC_1_SQRT_2),
                Vector4::new(-0.218508, -0.572061, 0.353553, -FRAC_1_SQRT_2),
                Vector4::new(-0.218508, -0.572061, -0.353553, FRAC_1_SQRT_2),
                Vector4::new(-0.218508, -0.572061, -0.353553, -FRAC_1_SQRT_2),
                Vector4::new(0.218508, FRAC_1_SQRT_2, 0.572061, 0.353553),
                Vector4::new(0.218508, FRAC_1_SQRT_2, 0.572061, -0.353553),
                Vector4::new(0.218508, FRAC_1_SQRT_2, -0.572061, 0.353553),
                Vector4::new(0.218508, FRAC_1_SQRT_2, -0.572061, -0.353553),
                Vector4::new(0.218508, -FRAC_1_SQRT_2, 0.572061, 0.353553),
                Vector4::new(0.218508, -FRAC_1_SQRT_2, 0.572061, -0.353553),
                Vector4::new(0.218508, -FRAC_1_SQRT_2, -0.572061, 0.353553),
                Vector4::new(0.218508, -FRAC_1_SQRT_2, -0.572061, -0.353553),
                Vector4::new(-0.218508, FRAC_1_SQRT_2, 0.572061, 0.353553),
                Vector4::new(-0.218508, FRAC_1_SQRT_2, 0.572061, -0.353553),
                Vector4::new(-0.218508, FRAC_1_SQRT_2, -0.572061, 0.353553),
                Vector4::new(-0.218508, FRAC_1_SQRT_2, -0.572061, -0.353553),
                Vector4::new(-0.218508, -FRAC_1_SQRT_2, 0.572061, 0.353553),
                Vector4::new(-0.218508, -FRAC_1_SQRT_2, 0.572061, -0.353553),
                Vector4::new(-0.218508, -FRAC_1_SQRT_2, -0.572061, 0.353553),
                Vector4::new(-0.218508, -FRAC_1_SQRT_2, -0.572061, -0.353553),
                Vector4::new(0.353553, 0.218508, 0.572061, FRAC_1_SQRT_2),
                Vector4::new(0.353553, 0.218508, 0.572061, -FRAC_1_SQRT_2),
                Vector4::new(0.353553, 0.218508, -0.572061, FRAC_1_SQRT_2),
                Vector4::new(0.353553, 0.218508, -0.572061, -FRAC_1_SQRT_2),
                Vector4::new(0.353553, -0.218508, 0.572061, FRAC_1_SQRT_2),
                Vector4::new(0.353553, -0.218508, 0.572061, -FRAC_1_SQRT_2),
                Vector4::new(0.353553, -0.218508, -0.572061, FRAC_1_SQRT_2),
                Vector4::new(0.353553, -0.218508, -0.572061, -FRAC_1_SQRT_2),
                Vector4::new(-0.353553, 0.218508, 0.572061, FRAC_1_SQRT_2),
                Vector4::new(-0.353553, 0.218508, 0.572061, -FRAC_1_SQRT_2),
                Vector4::new(-0.353553, 0.218508, -0.572061, FRAC_1_SQRT_2),
                Vector4::new(-0.353553, 0.218508, -0.572061, -FRAC_1_SQRT_2),
                Vector4::new(-0.353553, -0.218508, 0.572061, FRAC_1_SQRT_2),
                Vector4::new(-0.353553, -0.218508, 0.572061, -FRAC_1_SQRT_2),
                Vector4::new(-0.353553, -0.218508, -0.572061, FRAC_1_SQRT_2),
                Vector4::new(-0.353553, -0.218508, -0.572061, -FRAC_1_SQRT_2),
                Vector4::new(0.353553, 0.572061, FRAC_1_SQRT_2, 0.218508),
                Vector4::new(0.353553, 0.572061, FRAC_1_SQRT_2, -0.218508),
                Vector4::new(0.353553, 0.572061, -FRAC_1_SQRT_2, 0.218508),
                Vector4::new(0.353553, 0.572061, -FRAC_1_SQRT_2, -0.218508),
                Vector4::new(0.353553, -0.572061, FRAC_1_SQRT_2, 0.218508),
                Vector4::new(0.353553, -0.572061, FRAC_1_SQRT_2, -0.218508),
                Vector4::new(0.353553, -0.572061, -FRAC_1_SQRT_2, 0.218508),
                Vector4::new(0.353553, -0.572061, -FRAC_1_SQRT_2, -0.218508),
                Vector4::new(-0.353553, 0.572061, FRAC_1_SQRT_2, 0.218508),
                Vector4::new(-0.353553, 0.572061, FRAC_1_SQRT_2, -0.218508),
                Vector4::new(-0.353553, 0.572061, -FRAC_1_SQRT_2, 0.218508),
                Vector4::new(-0.353553, 0.572061, -FRAC_1_SQRT_2, -0.218508),
                Vector4::new(-0.353553, -0.572061, FRAC_1_SQRT_2, 0.218508),
                Vector4::new(-0.353553, -0.572061, FRAC_1_SQRT_2, -0.218508),
                Vector4::new(-0.353553, -0.572061, -FRAC_1_SQRT_2, 0.218508),
                Vector4::new(-0.353553, -0.572061, -FRAC_1_SQRT_2, -0.218508),
                Vector4::new(0.353553, FRAC_1_SQRT_2, 0.218508, 0.572061),
                Vector4::new(0.353553, FRAC_1_SQRT_2, 0.218508, -0.572061),
                Vector4::new(0.353553, FRAC_1_SQRT_2, -0.218508, 0.572061),
                Vector4::new(0.353553, FRAC_1_SQRT_2, -0.218508, -0.572061),
                Vector4::new(0.353553, -FRAC_1_SQRT_2, 0.218508, 0.572061),
                Vector4::new(0.353553, -FRAC_1_SQRT_2, 0.218508, -0.572061),
                Vector4::new(0.353553, -FRAC_1_SQRT_2, -0.218508, 0.572061),
                Vector4::new(0.353553, -FRAC_1_SQRT_2, -0.218508, -0.572061),
                Vector4::new(-0.353553, FRAC_1_SQRT_2, 0.218508, 0.572061),
                Vector4::new(-0.353553, FRAC_1_SQRT_2, 0.218508, -0.572061),
                Vector4::new(-0.353553, FRAC_1_SQRT_2, -0.218508, 0.572061),
                Vector4::new(-0.353553, FRAC_1_SQRT_2, -0.218508, -0.572061),
                Vector4::new(-0.353553, -FRAC_1_SQRT_2, 0.218508, 0.572061),
                Vector4::new(-0.353553, -FRAC_1_SQRT_2, 0.218508, -0.572061),
                Vector4::new(-0.353553, -FRAC_1_SQRT_2, -0.218508, 0.572061),
                Vector4::new(-0.353553, -FRAC_1_SQRT_2, -0.218508, -0.572061),
                Vector4::new(0.572061, 0.218508, FRAC_1_SQRT_2, 0.353553),
                Vector4::new(0.572061, 0.218508, FRAC_1_SQRT_2, -0.353553),
                Vector4::new(0.572061, 0.218508, -FRAC_1_SQRT_2, 0.353553),
                Vector4::new(0.572061, 0.218508, -FRAC_1_SQRT_2, -0.353553),
                Vector4::new(0.572061, -0.218508, FRAC_1_SQRT_2, 0.353553),
                Vector4::new(0.572061, -0.218508, FRAC_1_SQRT_2, -0.353553),
                Vector4::new(0.572061, -0.218508, -FRAC_1_SQRT_2, 0.353553),
                Vector4::new(0.572061, -0.218508, -FRAC_1_SQRT_2, -0.353553),
                Vector4::new(-0.572061, 0.218508, FRAC_1_SQRT_2, 0.353553),
                Vector4::new(-0.572061, 0.218508, FRAC_1_SQRT_2, -0.353553),
                Vector4::new(-0.572061, 0.218508, -FRAC_1_SQRT_2, 0.353553),
                Vector4::new(-0.572061, 0.218508, -FRAC_1_SQRT_2, -0.353553),
                Vector4::new(-0.572061, -0.218508, FRAC_1_SQRT_2, 0.353553),
                Vector4::new(-0.572061, -0.218508, FRAC_1_SQRT_2, -0.353553),
                Vector4::new(-0.572061, -0.218508, -FRAC_1_SQRT_2, 0.353553),
                Vector4::new(-0.572061, -0.218508, -FRAC_1_SQRT_2, -0.353553),
                Vector4::new(0.572061, 0.353553, 0.218508, FRAC_1_SQRT_2),
                Vector4::new(0.572061, 0.353553, 0.218508, -FRAC_1_SQRT_2),
                Vector4::new(0.572061, 0.353553, -0.218508, FRAC_1_SQRT_2),
                Vector4::new(0.572061, 0.353553, -0.218508, -FRAC_1_SQRT_2),
                Vector4::new(0.572061, -0.353553, 0.218508, FRAC_1_SQRT_2),
                Vector4::new(0.572061, -0.353553, 0.218508, -FRAC_1_SQRT_2),
                Vector4::new(0.572061, -0.353553, -0.218508, FRAC_1_SQRT_2),
                Vector4::new(0.572061, -0.353553, -0.218508, -FRAC_1_SQRT_2),
                Vector4::new(-0.572061, 0.353553, 0.218508, FRAC_1_SQRT_2),
                Vector4::new(-0.572061, 0.353553, 0.218508, -FRAC_1_SQRT_2),
                Vector4::new(-0.572061, 0.353553, -0.218508, FRAC_1_SQRT_2),
                Vector4::new(-0.572061, 0.353553, -0.218508, -FRAC_1_SQRT_2),
                Vector4::new(-0.572061, -0.353553, 0.218508, FRAC_1_SQRT_2),
                Vector4::new(-0.572061, -0.353553, 0.218508, -FRAC_1_SQRT_2),
                Vector4::new(-0.572061, -0.353553, -0.218508, FRAC_1_SQRT_2),
                Vector4::new(-0.572061, -0.353553, -0.218508, -FRAC_1_SQRT_2),
                Vector4::new(0.572061, FRAC_1_SQRT_2, 0.353553, 0.218508),
                Vector4::new(0.572061, FRAC_1_SQRT_2, 0.353553, -0.218508),
                Vector4::new(0.572061, FRAC_1_SQRT_2, -0.353553, 0.218508),
                Vector4::new(0.572061, FRAC_1_SQRT_2, -0.353553, -0.218508),
                Vector4::new(0.572061, -FRAC_1_SQRT_2, 0.353553, 0.218508),
                Vector4::new(0.572061, -FRAC_1_SQRT_2, 0.353553, -0.218508),
                Vector4::new(0.572061, -FRAC_1_SQRT_2, -0.353553, 0.218508),
                Vector4::new(0.572061, -FRAC_1_SQRT_2, -0.353553, -0.218508),
                Vector4::new(-0.572061, FRAC_1_SQRT_2, 0.353553, 0.218508),
                Vector4::new(-0.572061, FRAC_1_SQRT_2, 0.353553, -0.218508),
                Vector4::new(-0.572061, FRAC_1_SQRT_2, -0.353553, 0.218508),
                Vector4::new(-0.572061, FRAC_1_SQRT_2, -0.353553, -0.218508),
                Vector4::new(-0.572061, -FRAC_1_SQRT_2, 0.353553, 0.218508),
                Vector4::new(-0.572061, -FRAC_1_SQRT_2, 0.353553, -0.218508),
                Vector4::new(-0.572061, -FRAC_1_SQRT_2, -0.353553, 0.218508),
                Vector4::new(-0.572061, -FRAC_1_SQRT_2, -0.353553, -0.218508),
                Vector4::new(FRAC_1_SQRT_2, 0.218508, 0.353553, 0.572061),
                Vector4::new(FRAC_1_SQRT_2, 0.218508, 0.353553, -0.572061),
                Vector4::new(FRAC_1_SQRT_2, 0.218508, -0.353553, 0.572061),
                Vector4::new(FRAC_1_SQRT_2, 0.218508, -0.353553, -0.572061),
                Vector4::new(FRAC_1_SQRT_2, -0.218508, 0.353553, 0.572061),
                Vector4::new(FRAC_1_SQRT_2, -0.218508, 0.353553, -0.572061),
                Vector4::new(FRAC_1_SQRT_2, -0.218508, -0.353553, 0.572061),
                Vector4::new(FRAC_1_SQRT_2, -0.218508, -0.353553, -0.572061),
                Vector4::new(-FRAC_1_SQRT_2, 0.218508, 0.353553, 0.572061),
                Vector4::new(-FRAC_1_SQRT_2, 0.218508, 0.353553, -0.572061),
                Vector4::new(-FRAC_1_SQRT_2, 0.218508, -0.353553, 0.572061),
                Vector4::new(-FRAC_1_SQRT_2, 0.218508, -0.353553, -0.572061),
                Vector4::new(-FRAC_1_SQRT_2, -0.218508, 0.353553, 0.572061),
                Vector4::new(-FRAC_1_SQRT_2, -0.218508, 0.353553, -0.572061),
                Vector4::new(-FRAC_1_SQRT_2, -0.218508, -0.353553, 0.572061),
                Vector4::new(-FRAC_1_SQRT_2, -0.218508, -0.353553, -0.572061),
            ],
            Polychoron::Cell600 => vec![
                Vector4::new(1.0, 0.0, 0.0, 0.0),
                Vector4::new(-1.0, 0.0, 0.0, 0.0),
                Vector4::new(0.0, 0.0, 1.0, 0.0),
                Vector4::new(0.0, 0.0, -1.0, 0.0),
                Vector4::new(0.0, 1.0, 0.0, 0.0),
                Vector4::new(0.0, -1.0, 0.0, 0.0),
                Vector4::new(0.0, 0.0, 0.0, 1.0),
                Vector4::new(0.0, 0.0, 0.0, -1.0),
                Vector4::new(0.0, 0.309017, 0.5, 0.809015),
                Vector4::new(0.0, 0.309017, -0.5, 0.809015),
                Vector4::new(0.0, -0.309017, 0.5, 0.809015),
                Vector4::new(0.0, 0.309017, 0.5, -0.809015),
                Vector4::new(0.0, -0.309017, -0.5, 0.809015),
                Vector4::new(0.0, 0.309017, -0.5, -0.809015),
                Vector4::new(0.0, -0.309017, 0.5, -0.809015),
                Vector4::new(0.0, -0.309017, -0.5, -0.809015),
                Vector4::new(0.0, 0.809015, 0.309017, 0.5),
                Vector4::new(0.0, 0.809015, -0.309017, 0.5),
                Vector4::new(0.0, -0.809015, 0.309017, 0.5),
                Vector4::new(0.0, 0.809015, 0.309017, -0.5),
                Vector4::new(0.0, -0.809015, -0.309017, 0.5),
                Vector4::new(0.0, 0.809015, -0.309017, -0.5),
                Vector4::new(0.0, -0.809015, 0.309017, -0.5),
                Vector4::new(0.0, -0.809015, -0.309017, -0.5),
                Vector4::new(0.0, 0.5, 0.809015, 0.309017),
                Vector4::new(0.0, 0.5, -0.809015, 0.309017),
                Vector4::new(0.0, -0.5, 0.809015, 0.309017),
                Vector4::new(0.0, 0.5, 0.809015, -0.309017),
                Vector4::new(0.0, -0.5, -0.809015, 0.309017),
                Vector4::new(0.0, 0.5, -0.809015, -0.309017),
                Vector4::new(0.0, -0.5, 0.809015, -0.309017),
                Vector4::new(0.0, -0.5, -0.809015, -0.309017),
                Vector4::new(0.5, 0.809015, 0.0, 0.309017),
                Vector4::new(-0.5, 0.809015, 0.0, 0.309017),
                Vector4::new(0.5, -0.809015, 0.0, 0.309017),
                Vector4::new(0.5, 0.809015, 0.0, -0.309017),
                Vector4::new(-0.5, -0.809015, 0.0, 0.309017),
                Vector4::new(-0.5, 0.809015, 0.0, -0.309017),
                Vector4::new(0.5, -0.809015, 0.0, -0.309017),
                Vector4::new(-0.5, -0.809015, 0.0, -0.309017),
                Vector4::new(0.309017, 0.5, 0.0, 0.809015),
                Vector4::new(-0.309017, 0.5, 0.0, 0.809015),
                Vector4::new(0.309017, -0.5, 0.0, 0.809015),
                Vector4::new(0.309017, 0.5, 0.0, -0.809015),
                Vector4::new(-0.309017, -0.5, 0.0, 0.809015),
                Vector4::new(-0.309017, 0.5, 0.0, -0.809015),
                Vector4::new(0.309017, -0.5, 0.0, -0.809015),
                Vector4::new(-0.309017, -0.5, 0.0, -0.809015),
                Vector4::new(0.809015, 0.309017, 0.0, 0.5),
                Vector4::new(-0.809015, 0.309017, 0.0, 0.5),
                Vector4::new(0.809015, -0.309017, 0.0, 0.5),
                Vector4::new(0.809015, 0.309017, 0.0, -0.5),
                Vector4::new(-0.809015, -0.309017, 0.0, 0.5),
                Vector4::new(-0.809015, 0.309017, 0.0, -0.5),
                Vector4::new(0.809015, -0.309017, 0.0, -0.5),
                Vector4::new(-0.809015, -0.309017, 0.0, -0.5),
                Vector4::new(0.309017, 0.0, 0.809015, 0.5),
                Vector4::new(-0.309017, 0.0, 0.809015, 0.5),
                Vector4::new(0.309017, 0.0, -0.809015, 0.5),
                Vector4::new(0.309017, 0.0, 0.809015, -0.5),
                Vector4::new(-0.309017, 0.0, -0.809015, 0.5),
                Vector4::new(-0.309017, 0.0, 0.809015, -0.5),
                Vector4::new(0.309017, 0.0, -0.809015, -0.5),
                Vector4::new(-0.309017, 0.0, -0.809015, -0.5),
                Vector4::new(0.809015, 0.0, 0.5, 0.309017),
                Vector4::new(-0.809015, 0.0, 0.5, 0.309017),
                Vector4::new(0.809015, 0.0, -0.5, 0.309017),
                Vector4::new(0.809015, 0.0, 0.5, -0.309017),
                Vector4::new(-0.809015, 0.0, -0.5, 0.309017),
                Vector4::new(-0.809015, 0.0, 0.5, -0.309017),
                Vector4::new(0.809015, 0.0, -0.5, -0.309017),
                Vector4::new(-0.809015, 0.0, -0.5, -0.309017),
                Vector4::new(0.5, 0.0, 0.309017, 0.809015),
                Vector4::new(-0.5, 0.0, 0.309017, 0.809015),
                Vector4::new(0.5, 0.0, -0.309017, 0.809015),
                Vector4::new(0.5, 0.0, 0.309017, -0.809015),
                Vector4::new(-0.5, 0.0, -0.309017, 0.809015),
                Vector4::new(-0.5, 0.0, 0.309017, -0.809015),
                Vector4::new(0.5, 0.0, -0.309017, -0.809015),
                Vector4::new(-0.5, 0.0, -0.309017, -0.809015),
                Vector4::new(0.809015, 0.5, 0.309017, 0.0),
                Vector4::new(-0.809015, 0.5, 0.309017, 0.0),
                Vector4::new(0.809015, 0.5, -0.309017, 0.0),
                Vector4::new(0.809015, -0.5, 0.309017, 0.0),
                Vector4::new(-0.809015, 0.5, -0.309017, 0.0),
                Vector4::new(-0.809015, -0.5, 0.309017, 0.0),
                Vector4::new(0.809015, -0.5, -0.309017, 0.0),
                Vector4::new(-0.809015, -0.5, -0.309017, 0.0),
                Vector4::new(0.5, 0.309017, 0.809015, 0.0),
                Vector4::new(-0.5, 0.309017, 0.809015, 0.0),
                Vector4::new(0.5, 0.309017, -0.809015, 0.0),
                Vector4::new(0.5, -0.309017, 0.809015, 0.0),
                Vector4::new(-0.5, 0.309017, -0.809015, 0.0),
                Vector4::new(-0.5, -0.309017, 0.809015, 0.0),
                Vector4::new(0.5, -0.309017, -0.809015, 0.0),
                Vector4::new(-0.5, -0.309017, -0.809015, 0.0),
                Vector4::new(0.309017, 0.809015, 0.5, 0.0),
                Vector4::new(-0.309017, 0.809015, 0.5, 0.0),
                Vector4::new(0.309017, 0.809015, -0.5, 0.0),
                Vector4::new(0.309017, -0.809015, 0.5, 0.0),
                Vector4::new(-0.309017, 0.809015, -0.5, 0.0),
                Vector4::new(-0.309017, -0.809015, 0.5, 0.0),
                Vector4::new(0.309017, -0.809015, -0.5, 0.0),
                Vector4::new(-0.309017, -0.809015, -0.5, 0.0),
                Vector4::new(0.5, 0.5, 0.5, 0.5),
                Vector4::new(-0.5, 0.5, 0.5, 0.5),
                Vector4::new(0.5, 0.5, -0.5, 0.5),
                Vector4::new(0.5, -0.5, 0.5, 0.5),
                Vector4::new(0.5, 0.5, 0.5, -0.5),
                Vector4::new(-0.5, 0.5, -0.5, 0.5),
                Vector4::new(-0.5, -0.5, 0.5, 0.5),
                Vector4::new(-0.5, 0.5, 0.5, -0.5),
                Vector4::new(0.5, -0.5, -0.5, 0.5),
                Vector4::new(0.5, 0.5, -0.5, -0.5),
                Vector4::new(0.5, -0.5, 0.5, -0.5),
                Vector4::new(-0.5, -0.5, -0.5, 0.5),
                Vector4::new(-0.5, 0.5, -0.5, -0.5),
                Vector4::new(-0.5, -0.5, 0.5, -0.5),
                Vector4::new(0.5, -0.5, -0.5, -0.5),
                Vector4::new(-0.5, -0.5, -0.5, -0.5),
            ],
        }
    }

    /// Returns a list of the edge indices that correspond to this polychoron. Indices
    /// should *always* be considered in pairs, as each edge of any polychoron consists
    /// of 2 vertices. Each of these pairs of indices can be used to index into the array
    /// returned by `get_vertices(...)` to obtain the two vertices that make up that edge.
    pub fn get_edges(&self) -> Vec<u32> {
        match *self {
            Polychoron::Cell8 => vec![
                0, 2, 2, 3, 3, 1, 1, 0, 0, 4, 4, 5, 5, 1, 4, 6, 6, 2, 0, 8, 8, 9, 9, 1, 8, 10, 10,
                2, 8, 12, 12, 4, 6, 7, 7, 5, 7, 3, 10, 11, 11, 3, 9, 11, 9, 13, 13, 5, 12, 13, 12,
                14, 14, 10, 14, 6, 14, 15, 15, 13, 15, 11, 15, 7,
            ],
            Polychoron::Cell16 => vec![
                5, 6, 6, 7, 7, 5, 4, 6, 7, 4, 4, 5, 0, 6, 7, 0, 0, 5, 1, 6, 7, 1, 1, 4, 0, 1, 2, 5,
                7, 2, 2, 4, 0, 2, 1, 2, 3, 5, 6, 3, 3, 4, 0, 3, 1, 3, 2, 3,
            ],
            Polychoron::Cell24 => vec![
                0, 8, 8, 9, 9, 0, 8, 10, 10, 0, 1, 8, 9, 1, 10, 1, 10, 11, 11, 0, 9, 11, 11, 1, 8,
                12, 12, 0, 2, 8, 9, 2, 12, 2, 12, 13, 13, 0, 9, 13, 13, 2, 3, 8, 10, 3, 12, 3, 12,
                14, 14, 0, 10, 14, 14, 3, 8, 16, 16, 1, 16, 2, 9, 17, 17, 1, 17, 2, 16, 17, 16, 3,
                10, 18, 18, 1, 16, 18, 18, 3, 16, 20, 20, 2, 20, 3, 12, 20, 14, 15, 15, 0, 13, 15,
                5, 12, 13, 5, 14, 5, 15, 5, 11, 15, 6, 10, 11, 6, 14, 6, 15, 6, 7, 9, 11, 7, 13, 7,
                15, 7, 11, 19, 19, 1, 18, 19, 18, 6, 19, 6, 17, 7, 17, 19, 19, 7, 17, 21, 21, 2,
                13, 21, 21, 7, 4, 16, 17, 4, 18, 4, 19, 4, 20, 4, 20, 21, 21, 4, 20, 22, 22, 3, 18,
                22, 22, 4, 20, 5, 21, 5, 14, 22, 22, 5, 22, 6, 22, 23, 23, 4, 21, 23, 23, 5, 19,
                23, 23, 6, 23, 7, 15, 23,
            ],
            Polychoron::Cell24Rectified => vec![unimplemented!()],
            Polychoron::Cell120 => vec![
                305, 401, 25, 585, 401, 585, 25, 153, 153, 305, 307, 403, 27, 587, 403, 587, 27,
                155, 155, 307, 17, 401, 17, 403, 305, 307, 137, 425, 139, 427, 137, 139, 321, 427,
                321, 425, 553, 585, 137, 553, 25, 425, 555, 587, 139, 555, 27, 427, 17, 385, 385,
                553, 385, 555, 225, 321, 155, 225, 153, 225, 401, 589, 29, 589, 29, 157, 157, 305,
                121, 585, 121, 537, 409, 537, 25, 409, 125, 589, 121, 125, 125, 541, 413, 541, 29,
                413, 377, 541, 377, 537, 20, 377, 314, 413, 20, 314, 20, 312, 312, 409, 218, 314,
                157, 218, 216, 312, 216, 218, 153, 216, 31, 159, 403, 591, 31, 591, 159, 307, 315,
                415, 31, 415, 219, 315, 159, 219, 411, 539, 123, 587, 123, 539, 27, 411, 21, 379,
                379, 539, 21, 313, 313, 411, 127, 591, 123, 127, 415, 543, 379, 543, 21, 315, 127,
                543, 217, 313, 217, 219, 155, 217, 31, 431, 323, 431, 227, 323, 159, 227, 17, 387,
                557, 589, 387, 557, 559, 591, 387, 559, 141, 429, 141, 557, 29, 429, 143, 431, 143,
                559, 141, 143, 323, 429, 157, 227, 95, 415, 94, 95, 94, 414, 315, 414, 431, 575,
                95, 575, 395, 575, 1, 395, 1, 323, 395, 574, 94, 574, 430, 574, 1, 322, 322, 430,
                30, 430, 30, 414, 226, 322, 226, 227, 30, 158, 158, 226, 158, 219, 137, 521, 73,
                521, 73, 569, 425, 569, 75, 571, 139, 523, 75, 523, 427, 571, 75, 203, 203, 297,
                297, 393, 393, 571, 369, 521, 369, 523, 273, 369, 201, 273, 73, 201, 203, 273, 201,
                296, 296, 297, 296, 392, 392, 569, 0, 393, 0, 392, 0, 321, 41, 553, 121, 489, 41,
                489, 457, 521, 41, 457, 57, 441, 441, 489, 57, 537, 105, 473, 105, 457, 73, 473,
                105, 441, 473, 505, 57, 505, 89, 505, 89, 569, 89, 409, 91, 507, 59, 539, 59, 507,
                91, 411, 43, 555, 123, 491, 43, 491, 75, 475, 475, 507, 91, 571, 459, 523, 43, 459,
                59, 443, 443, 491, 107, 475, 107, 459, 107, 443, 283, 379, 282, 283, 282, 378, 21,
                378, 361, 507, 361, 506, 90, 506, 90, 91, 59, 187, 187, 283, 187, 265, 265, 361,
                186, 265, 186, 282, 58, 186, 58, 506, 58, 538, 378, 538, 410, 538, 90, 410, 313,
                410, 289, 385, 291, 387, 289, 291, 125, 493, 45, 557, 45, 493, 41, 169, 169, 289,
                353, 489, 353, 493, 173, 291, 45, 173, 169, 257, 257, 353, 173, 257, 127, 495, 47,
                559, 47, 495, 43, 171, 171, 289, 355, 491, 355, 495, 175, 291, 47, 175, 171, 259,
                259, 355, 175, 259, 63, 543, 63, 511, 95, 511, 63, 191, 191, 283, 267, 363, 191,
                267, 363, 511, 190, 267, 363, 510, 62, 190, 62, 510, 190, 282, 94, 510, 62, 542,
                378, 542, 414, 542, 141, 525, 77, 525, 77, 573, 429, 573, 445, 493, 61, 445, 61,
                541, 45, 461, 461, 525, 109, 445, 109, 461, 109, 477, 477, 509, 61, 509, 77, 477,
                93, 509, 93, 573, 93, 413, 143, 527, 79, 527, 79, 575, 447, 495, 63, 447, 47, 463,
                463, 527, 111, 447, 111, 463, 111, 479, 479, 511, 79, 479, 371, 525, 371, 527, 275,
                371, 205, 275, 77, 205, 207, 275, 79, 207, 207, 299, 205, 298, 298, 299, 299, 395,
                298, 394, 394, 573, 1, 394, 347, 475, 251, 347, 203, 251, 13, 347, 13, 361, 13,
                346, 250, 346, 250, 251, 346, 474, 474, 506, 202, 250, 74, 474, 74, 202, 202, 297,
                74, 570, 90, 570, 393, 570, 9, 369, 337, 457, 9, 337, 339, 459, 9, 339, 169, 241,
                241, 337, 171, 243, 243, 339, 241, 243, 329, 441, 233, 329, 185, 233, 57, 185, 5,
                353, 5, 329, 333, 445, 5, 333, 237, 333, 189, 237, 61, 189, 233, 237, 189, 281,
                185, 281, 281, 377, 331, 443, 235, 331, 187, 235, 7, 355, 7, 331, 335, 447, 7, 335,
                239, 335, 191, 239, 235, 239, 173, 245, 175, 247, 245, 247, 341, 461, 245, 341,
                343, 463, 247, 343, 11, 371, 11, 341, 11, 343, 277, 373, 9, 373, 273, 277, 105,
                113, 113, 481, 345, 481, 345, 473, 113, 465, 337, 465, 81, 529, 373, 529, 81, 209,
                209, 277, 465, 529, 81, 481, 209, 249, 249, 345, 201, 249, 107, 115, 115, 483, 347,
                483, 115, 467, 339, 467, 83, 531, 373, 531, 83, 211, 211, 277, 467, 531, 83, 483,
                211, 251, 329, 449, 113, 449, 65, 449, 65, 193, 193, 233, 65, 513, 481, 513, 364,
                513, 193, 268, 268, 364, 12, 364, 12, 345, 264, 268, 185, 264, 12, 360, 264, 360,
                360, 505, 331, 451, 115, 451, 67, 451, 67, 195, 195, 235, 67, 515, 483, 515, 365,
                515, 195, 269, 269, 365, 13, 365, 265, 269, 257, 261, 177, 261, 177, 241, 5, 357,
                261, 357, 449, 497, 357, 497, 49, 497, 49, 465, 49, 177, 259, 263, 179, 263, 179,
                243, 7, 359, 263, 359, 451, 499, 359, 499, 51, 499, 51, 467, 51, 179, 181, 245,
                181, 261, 183, 247, 183, 263, 181, 295, 183, 295, 293, 295, 177, 293, 179, 293,
                109, 117, 333, 453, 117, 453, 341, 469, 117, 469, 357, 501, 453, 501, 53, 181, 53,
                469, 53, 501, 111, 119, 335, 455, 119, 455, 343, 471, 119, 471, 359, 503, 455, 503,
                55, 183, 55, 471, 55, 503, 117, 485, 349, 485, 349, 477, 69, 453, 69, 197, 197,
                237, 69, 517, 485, 517, 366, 517, 270, 366, 197, 270, 14, 366, 14, 349, 266, 270,
                14, 362, 266, 362, 189, 266, 362, 509, 351, 487, 119, 487, 351, 479, 71, 199, 71,
                455, 199, 239, 367, 519, 487, 519, 15, 367, 15, 351, 71, 519, 271, 367, 199, 271,
                267, 271, 15, 363, 11, 375, 279, 375, 275, 279, 469, 533, 375, 533, 85, 533, 85,
                485, 85, 213, 213, 279, 213, 253, 253, 349, 205, 253, 471, 535, 375, 535, 87, 487,
                87, 215, 215, 255, 255, 351, 87, 535, 215, 279, 207, 255, 388, 562, 388, 560, 146,
                562, 144, 560, 144, 146, 292, 388, 50, 562, 178, 292, 50, 178, 48, 560, 176, 292,
                48, 176, 146, 530, 50, 466, 466, 530, 144, 528, 48, 464, 464, 528, 372, 530, 372,
                528, 178, 242, 176, 240, 240, 242, 338, 466, 242, 338, 336, 464, 240, 336, 8, 372,
                8, 338, 8, 336, 129, 497, 129, 545, 65, 545, 133, 501, 129, 133, 133, 549, 69, 549,
                381, 549, 381, 545, 285, 381, 197, 285, 193, 285, 67, 547, 131, 499, 131, 547, 287,
                383, 383, 547, 195, 287, 135, 503, 131, 135, 71, 551, 383, 551, 199, 287, 135, 551,
                295, 391, 53, 565, 391, 565, 55, 567, 391, 567, 149, 533, 149, 565, 151, 535, 151,
                567, 149, 151, 103, 519, 102, 103, 102, 518, 367, 518, 87, 583, 103, 583, 399, 583,
                303, 399, 215, 303, 399, 582, 102, 582, 86, 582, 214, 303, 86, 214, 86, 486, 486,
                518, 214, 254, 254, 255, 350, 486, 254, 350, 15, 350, 145, 433, 433, 577, 145, 529,
                81, 577, 435, 579, 147, 435, 147, 531, 83, 579, 325, 435, 2, 325, 2, 397, 397, 579,
                325, 433, 145, 147, 2, 396, 396, 577, 301, 397, 300, 396, 300, 301, 211, 301, 209,
                300, 561, 593, 129, 593, 49, 561, 33, 593, 33, 433, 145, 561, 33, 417, 417, 545,
                97, 417, 97, 577, 97, 513, 99, 419, 419, 547, 99, 515, 563, 595, 131, 595, 51, 563,
                35, 435, 35, 419, 99, 579, 35, 595, 147, 563, 23, 383, 23, 382, 286, 382, 286, 287,
                317, 419, 317, 418, 98, 418, 98, 99, 23, 317, 418, 546, 382, 546, 66, 546, 98, 514,
                66, 514, 194, 286, 66, 194, 365, 514, 194, 269, 19, 389, 19, 391, 293, 389, 133,
                597, 565, 597, 405, 593, 19, 405, 389, 561, 405, 597, 135, 599, 567, 599, 407, 595,
                19, 407, 389, 563, 407, 599, 423, 551, 103, 423, 319, 423, 23, 319, 319, 422, 102,
                422, 422, 550, 382, 550, 70, 550, 70, 518, 70, 198, 198, 286, 198, 271, 149, 437,
                437, 581, 85, 581, 37, 597, 37, 421, 421, 549, 37, 437, 101, 421, 101, 581, 101,
                517, 151, 439, 439, 583, 39, 599, 39, 423, 39, 439, 327, 439, 327, 437, 3, 327, 3,
                399, 3, 398, 398, 581, 302, 398, 302, 303, 213, 302, 35, 163, 163, 229, 229, 325,
                163, 221, 221, 317, 162, 221, 162, 228, 228, 229, 34, 162, 34, 418, 228, 324, 34,
                434, 324, 434, 2, 324, 434, 578, 98, 578, 397, 578, 309, 405, 161, 309, 33, 161,
                311, 407, 163, 311, 309, 311, 161, 229, 165, 309, 37, 165, 165, 222, 220, 222, 161,
                220, 222, 318, 318, 421, 220, 316, 22, 318, 22, 316, 316, 417, 22, 381, 167, 311,
                39, 167, 167, 223, 221, 223, 223, 319, 167, 231, 165, 231, 231, 327, 230, 231, 166,
                230, 166, 223, 164, 230, 164, 222, 166, 310, 164, 308, 308, 310, 162, 310, 160,
                308, 160, 220, 160, 228, 230, 326, 3, 326, 38, 166, 326, 438, 38, 438, 38, 422,
                438, 582, 36, 164, 326, 436, 36, 436, 36, 420, 318, 420, 436, 580, 398, 580, 100,
                420, 100, 580, 100, 101, 310, 406, 38, 598, 406, 598, 308, 404, 36, 596, 404, 596,
                18, 406, 18, 404, 150, 438, 148, 436, 148, 150, 566, 598, 150, 566, 564, 596, 148,
                564, 18, 390, 390, 566, 390, 564, 406, 594, 34, 594, 134, 598, 134, 550, 130, 594,
                130, 134, 130, 546, 32, 160, 404, 592, 32, 592, 316, 416, 32, 416, 420, 548, 132,
                596, 132, 548, 22, 380, 380, 548, 128, 592, 128, 132, 416, 544, 380, 544, 128, 544,
                32, 432, 324, 432, 18, 388, 562, 594, 560, 592, 146, 434, 144, 432, 96, 416, 96,
                97, 432, 576, 96, 576, 396, 576, 150, 534, 86, 534, 84, 580, 148, 532, 84, 532,
                212, 302, 84, 212, 374, 534, 374, 532, 214, 278, 212, 278, 278, 374, 54, 566, 134,
                502, 54, 502, 470, 534, 54, 470, 70, 454, 454, 502, 118, 486, 118, 470, 118, 454,
                100, 516, 68, 548, 68, 516, 52, 564, 132, 500, 52, 500, 84, 484, 484, 516, 468,
                532, 52, 468, 68, 452, 452, 500, 116, 484, 116, 468, 116, 452, 284, 380, 284, 285,
                366, 516, 68, 196, 196, 284, 196, 270, 294, 390, 292, 294, 130, 498, 50, 498, 54,
                182, 182, 294, 358, 502, 358, 498, 182, 262, 262, 358, 178, 262, 128, 496, 48, 496,
                52, 180, 180, 294, 356, 500, 356, 496, 180, 260, 260, 356, 176, 260, 64, 544, 96,
                512, 64, 512, 192, 284, 64, 192, 364, 512, 192, 268, 82, 578, 82, 530, 450, 498,
                66, 450, 482, 514, 82, 482, 114, 450, 114, 466, 114, 482, 80, 576, 80, 528, 448,
                496, 64, 448, 480, 512, 80, 480, 112, 448, 112, 464, 112, 480, 82, 210, 210, 301,
                80, 208, 208, 300, 276, 372, 210, 276, 208, 276, 212, 252, 252, 253, 348, 484, 252,
                348, 14, 348, 10, 374, 342, 470, 10, 342, 340, 468, 10, 340, 182, 246, 246, 342,
                180, 244, 244, 340, 244, 246, 334, 454, 198, 238, 238, 334, 6, 358, 6, 334, 194,
                234, 234, 238, 330, 450, 6, 330, 234, 330, 332, 452, 196, 236, 236, 332, 4, 356, 4,
                332, 192, 232, 232, 236, 328, 448, 4, 328, 232, 328, 346, 482, 210, 250, 344, 480,
                12, 344, 208, 248, 248, 344, 248, 249, 274, 278, 206, 254, 206, 274, 204, 252, 204,
                274, 206, 299, 204, 298, 10, 370, 274, 370, 110, 118, 350, 478, 110, 478, 342, 462,
                110, 462, 78, 206, 78, 478, 370, 526, 462, 526, 78, 526, 108, 116, 348, 476, 108,
                476, 340, 460, 108, 460, 76, 204, 76, 476, 370, 524, 460, 524, 76, 524, 334, 446,
                110, 446, 190, 238, 478, 510, 62, 446, 332, 444, 108, 444, 188, 236, 188, 266, 476,
                508, 362, 508, 60, 444, 60, 188, 60, 508, 258, 262, 174, 246, 174, 258, 6, 354,
                258, 354, 46, 462, 46, 174, 446, 494, 354, 494, 46, 494, 256, 260, 172, 244, 172,
                256, 4, 352, 256, 352, 44, 460, 44, 172, 444, 492, 352, 492, 44, 492, 186, 234,
                184, 232, 184, 264, 188, 280, 184, 280, 280, 281, 170, 242, 170, 258, 168, 240,
                168, 256, 174, 290, 172, 290, 170, 288, 168, 288, 288, 290, 106, 114, 330, 442,
                106, 442, 338, 458, 106, 458, 354, 490, 442, 490, 42, 170, 42, 458, 42, 490, 104,
                112, 328, 440, 104, 440, 336, 456, 104, 456, 352, 488, 440, 488, 40, 168, 40, 456,
                40, 488, 106, 474, 58, 442, 344, 472, 104, 472, 56, 184, 56, 440, 360, 504, 472,
                504, 56, 504, 272, 276, 8, 368, 272, 368, 202, 272, 458, 522, 368, 522, 74, 522,
                200, 248, 200, 272, 456, 520, 368, 520, 72, 472, 72, 200, 72, 520, 200, 296, 78,
                574, 76, 572, 394, 572, 92, 508, 92, 572, 92, 93, 142, 526, 140, 524, 140, 142, 46,
                558, 142, 558, 44, 556, 140, 556, 290, 386, 386, 558, 386, 556, 126, 494, 126, 542,
                122, 490, 122, 126, 122, 538, 60, 540, 124, 492, 124, 540, 280, 376, 376, 540, 120,
                488, 120, 124, 56, 536, 376, 536, 120, 536, 288, 384, 42, 554, 384, 554, 40, 552,
                384, 552, 138, 522, 138, 554, 136, 520, 136, 552, 136, 138, 88, 504, 88, 89, 72,
                568, 88, 568, 392, 568, 142, 430, 428, 572, 140, 428, 322, 428, 558, 590, 126, 590,
                30, 590, 92, 412, 412, 540, 556, 588, 124, 588, 28, 428, 28, 412, 28, 588, 20, 376,
                314, 412, 16, 386, 16, 384, 122, 586, 554, 586, 402, 590, 16, 402, 402, 586, 120,
                584, 552, 584, 400, 588, 16, 400, 400, 584, 408, 536, 88, 408, 312, 408, 138, 426,
                426, 570, 26, 586, 26, 410, 26, 426, 136, 424, 424, 568, 24, 584, 24, 408, 24, 424,
                320, 426, 320, 424, 0, 320, 28, 156, 156, 226, 156, 218, 306, 402, 158, 306, 304,
                400, 156, 304, 304, 306, 26, 154, 154, 306, 154, 217, 24, 152, 152, 304, 152, 216,
                224, 320, 154, 224, 152, 224, 224, 225,
            ],
            Polychoron::Cell600 => vec![
                0, 48, 48, 50, 50, 0, 48, 64, 64, 0, 50, 64, 48, 66, 66, 0, 50, 66, 48, 80, 80, 0,
                64, 80, 48, 82, 82, 0, 66, 82, 80, 82, 50, 83, 83, 0, 64, 83, 50, 86, 86, 0, 66,
                86, 83, 86, 0, 51, 51, 54, 54, 0, 51, 67, 67, 0, 54, 67, 51, 70, 70, 0, 54, 70, 51,
                80, 67, 80, 51, 82, 70, 82, 54, 83, 67, 83, 54, 86, 70, 86, 64, 67, 66, 70, 1, 49,
                49, 52, 52, 1, 49, 65, 65, 1, 52, 65, 49, 68, 68, 1, 52, 68, 49, 81, 81, 1, 65, 81,
                49, 84, 84, 1, 68, 84, 81, 84, 52, 85, 85, 1, 65, 85, 52, 87, 87, 1, 68, 87, 85,
                87, 1, 53, 53, 55, 55, 1, 53, 69, 69, 1, 55, 69, 53, 71, 71, 1, 55, 71, 53, 81, 69,
                81, 53, 84, 71, 84, 55, 85, 69, 85, 55, 87, 71, 87, 65, 69, 68, 71, 2, 24, 24, 27,
                27, 2, 24, 88, 88, 2, 27, 88, 24, 89, 89, 2, 27, 89, 24, 56, 56, 2, 24, 57, 57, 2,
                56, 57, 56, 88, 57, 89, 2, 26, 26, 30, 30, 2, 26, 91, 91, 2, 30, 91, 26, 93, 93, 2,
                30, 93, 26, 56, 26, 57, 56, 91, 57, 93, 27, 59, 59, 2, 27, 61, 61, 2, 59, 61, 59,
                88, 61, 89, 30, 59, 30, 61, 59, 91, 61, 93, 88, 91, 89, 93, 3, 25, 25, 29, 29, 3,
                25, 90, 90, 3, 29, 90, 25, 92, 92, 3, 29, 92, 25, 58, 58, 3, 25, 60, 60, 3, 58, 60,
                58, 90, 60, 92, 3, 28, 28, 31, 31, 3, 28, 94, 94, 3, 31, 94, 28, 95, 95, 3, 31, 95,
                28, 58, 28, 60, 58, 94, 60, 95, 29, 62, 62, 3, 29, 63, 63, 3, 62, 63, 62, 90, 63,
                92, 31, 62, 31, 63, 62, 94, 63, 95, 90, 94, 92, 95, 4, 16, 16, 17, 17, 4, 16, 32,
                32, 4, 17, 32, 16, 33, 33, 4, 17, 33, 16, 96, 96, 4, 32, 96, 16, 97, 97, 4, 33, 97,
                96, 97, 17, 98, 98, 4, 32, 98, 17, 100, 100, 4, 33, 100, 98, 100, 4, 19, 19, 21,
                21, 4, 19, 35, 35, 4, 21, 35, 19, 37, 37, 4, 21, 37, 19, 96, 35, 96, 19, 97, 37,
                97, 21, 98, 35, 98, 21, 100, 37, 100, 32, 35, 33, 37, 5, 18, 18, 20, 20, 5, 18, 34,
                34, 5, 20, 34, 18, 36, 36, 5, 20, 36, 18, 99, 99, 5, 34, 99, 18, 101, 101, 5, 36,
                101, 99, 101, 20, 102, 102, 5, 34, 102, 20, 103, 103, 5, 36, 103, 102, 103, 5, 22,
                22, 23, 23, 5, 22, 38, 38, 5, 23, 38, 22, 39, 39, 5, 23, 39, 22, 99, 38, 99, 22,
                101, 39, 101, 23, 102, 38, 102, 23, 103, 39, 103, 34, 38, 36, 39, 6, 8, 8, 10, 10,
                6, 8, 72, 72, 6, 10, 72, 8, 73, 73, 6, 10, 73, 8, 40, 40, 6, 8, 41, 41, 6, 40, 41,
                40, 72, 41, 73, 6, 9, 9, 12, 12, 6, 9, 74, 74, 6, 12, 74, 9, 76, 76, 6, 12, 76, 9,
                40, 9, 41, 40, 74, 41, 76, 10, 42, 42, 6, 10, 44, 44, 6, 42, 44, 42, 72, 44, 73,
                12, 42, 12, 44, 42, 74, 44, 76, 72, 74, 73, 76, 7, 11, 11, 14, 14, 7, 11, 75, 75,
                7, 14, 75, 11, 77, 77, 7, 14, 77, 11, 43, 43, 7, 11, 45, 45, 7, 43, 45, 43, 75, 45,
                77, 7, 13, 13, 15, 15, 7, 13, 78, 78, 7, 15, 78, 13, 79, 79, 7, 15, 79, 13, 43, 13,
                45, 43, 78, 45, 79, 14, 46, 46, 7, 14, 47, 47, 7, 46, 47, 46, 75, 47, 77, 15, 46,
                15, 47, 46, 78, 47, 79, 75, 78, 77, 79, 10, 56, 56, 8, 10, 57, 57, 8, 56, 72, 57,
                73, 8, 16, 16, 24, 24, 8, 16, 104, 104, 8, 24, 104, 16, 105, 105, 8, 24, 105, 16,
                40, 16, 41, 40, 104, 41, 105, 56, 104, 57, 105, 72, 104, 73, 105, 12, 58, 58, 9,
                12, 60, 60, 9, 58, 74, 60, 76, 9, 17, 17, 25, 25, 9, 17, 106, 106, 9, 25, 106, 17,
                109, 109, 9, 25, 109, 17, 40, 17, 41, 40, 106, 41, 109, 58, 106, 60, 109, 74, 106,
                76, 109, 10, 18, 18, 26, 26, 10, 18, 107, 107, 10, 26, 107, 18, 110, 110, 10, 26,
                110, 18, 42, 18, 44, 42, 107, 44, 110, 56, 107, 57, 110, 72, 107, 73, 110, 14, 59,
                59, 11, 14, 61, 61, 11, 59, 75, 61, 77, 11, 19, 19, 27, 27, 11, 19, 108, 108, 11,
                27, 108, 19, 111, 111, 11, 27, 111, 19, 43, 19, 45, 43, 108, 45, 111, 59, 108, 61,
                111, 75, 108, 77, 111, 12, 20, 20, 28, 28, 12, 20, 112, 112, 12, 28, 112, 20, 115,
                115, 12, 28, 115, 20, 42, 20, 44, 42, 112, 44, 115, 58, 112, 60, 115, 74, 112, 76,
                115, 15, 62, 62, 13, 15, 63, 63, 13, 62, 78, 63, 79, 13, 21, 21, 29, 29, 13, 21,
                113, 113, 13, 29, 113, 21, 116, 116, 13, 29, 116, 21, 43, 21, 45, 43, 113, 45, 116,
                62, 113, 63, 116, 78, 113, 79, 116, 14, 22, 22, 30, 30, 14, 22, 114, 114, 14, 30,
                114, 22, 117, 117, 14, 30, 117, 22, 46, 22, 47, 46, 114, 47, 117, 59, 114, 61, 117,
                75, 114, 77, 117, 15, 23, 23, 31, 31, 15, 23, 118, 118, 15, 31, 118, 23, 119, 119,
                15, 31, 119, 23, 46, 23, 47, 46, 118, 47, 119, 62, 118, 63, 119, 78, 118, 79, 119,
                32, 40, 33, 41, 24, 96, 24, 97, 96, 104, 97, 105, 32, 104, 33, 105, 25, 98, 25,
                100, 98, 106, 100, 109, 32, 106, 33, 109, 34, 42, 36, 44, 26, 99, 26, 101, 99, 107,
                101, 110, 34, 107, 36, 110, 35, 43, 37, 45, 27, 96, 27, 97, 96, 108, 97, 111, 35,
                108, 37, 111, 28, 102, 28, 103, 102, 112, 103, 115, 34, 112, 36, 115, 29, 98, 29,
                100, 98, 113, 100, 116, 35, 113, 37, 116, 38, 46, 39, 47, 30, 99, 30, 101, 99, 114,
                101, 117, 38, 114, 39, 117, 31, 102, 31, 103, 102, 118, 103, 119, 38, 118, 39, 119,
                88, 96, 89, 97, 88, 104, 89, 105, 90, 98, 92, 100, 90, 106, 92, 109, 91, 99, 93,
                101, 91, 107, 93, 110, 88, 108, 89, 111, 94, 102, 95, 103, 94, 112, 95, 115, 90,
                113, 92, 116, 91, 114, 93, 117, 94, 118, 95, 119, 35, 80, 80, 32, 35, 82, 82, 32,
                80, 96, 82, 98, 40, 48, 48, 32, 48, 104, 48, 106, 80, 104, 82, 106, 37, 81, 81, 33,
                37, 84, 84, 33, 81, 97, 84, 100, 41, 49, 49, 33, 49, 105, 49, 109, 81, 105, 84,
                109, 38, 83, 83, 34, 38, 86, 86, 34, 83, 99, 86, 102, 42, 50, 50, 34, 50, 107, 50,
                112, 83, 107, 86, 112, 43, 51, 51, 35, 51, 108, 51, 113, 80, 108, 82, 113, 39, 85,
                85, 36, 39, 87, 87, 36, 85, 101, 87, 103, 44, 52, 52, 36, 52, 110, 52, 115, 85,
                110, 87, 115, 45, 53, 53, 37, 53, 111, 53, 116, 81, 111, 84, 116, 46, 54, 54, 38,
                54, 114, 54, 118, 83, 114, 86, 118, 47, 55, 55, 39, 55, 117, 55, 119, 85, 117, 87,
                119, 48, 72, 48, 74, 49, 73, 49, 76, 50, 72, 50, 74, 51, 75, 51, 78, 52, 73, 52,
                76, 53, 77, 53, 79, 54, 75, 54, 78, 55, 77, 55, 79, 64, 72, 66, 74, 64, 104, 66,
                106, 65, 73, 68, 76, 65, 105, 68, 109, 64, 107, 66, 112, 67, 75, 70, 78, 67, 108,
                70, 113, 65, 110, 68, 115, 69, 77, 71, 79, 69, 111, 71, 116, 67, 114, 70, 118, 69,
                117, 71, 119, 56, 64, 64, 88, 64, 91, 57, 65, 65, 89, 65, 93, 58, 66, 66, 90, 66,
                94, 59, 67, 67, 88, 67, 91, 60, 68, 68, 92, 68, 95, 61, 69, 69, 89, 69, 93, 62, 70,
                70, 90, 70, 94, 63, 71, 71, 92, 71, 95, 80, 88, 83, 91, 81, 89, 85, 93, 82, 90, 86,
                94, 84, 92, 87, 95,
            ],
        }
    }

    /// Returns a list of the face indices that correspond to this polychoron. Each
    /// index corresponds to an edge. For example, if a polychoron has cells with triangular
    /// faces, then the indices returned by this function should be considered in
    /// groups of 3, where each of these 3 indices corresponds to one of that triangle's
    /// edges. In other words, each set of 3 indices can be used to index into the array
    /// returned by `get_edges(...)` to obtain the 3 edges that make up that face.
    pub fn get_faces(&self) -> Vec<u32> {
        match *self {
            Polychoron::Cell8 => vec![
                0, 2, 3, 1, 0, 4, 5, 1, 0, 4, 6, 2, 0, 8, 9, 1, 0, 8, 10, 2, 0, 8, 12, 4, 4, 6, 7,
                5, 2, 6, 7, 3, 1, 5, 7, 3, 2, 10, 11, 3, 1, 9, 11, 3, 1, 9, 13, 5, 8, 10, 11, 9, 8,
                12, 13, 9, 8, 12, 14, 10, 4, 12, 13, 5, 4, 12, 14, 6, 2, 10, 14, 6, 12, 14, 15, 13,
                10, 14, 15, 11, 9, 13, 15, 11, 6, 14, 15, 7, 5, 13, 15, 7, 3, 11, 15, 7,
            ],
            Polychoron::Cell16 => vec![
                5, 6, 7, 4, 6, 7, 4, 5, 7, 4, 5, 6, 0, 6, 7, 0, 5, 7, 0, 5, 6, 1, 6, 7, 1, 4, 7, 1,
                4, 6, 0, 1, 7, 0, 1, 6, 2, 5, 7, 2, 4, 7, 2, 4, 5, 0, 2, 7, 0, 2, 5, 1, 2, 7, 1, 2,
                4, 0, 1, 2, 3, 5, 6, 3, 4, 6, 3, 4, 5, 0, 3, 6, 0, 3, 5, 1, 3, 6, 1, 3, 4, 0, 1, 3,
                2, 3, 5, 2, 3, 4, 0, 2, 3, 1, 2, 3,
            ],
            Polychoron::Cell24 => vec![
                0, 8, 9, 0, 8, 10, 1, 8, 9, 1, 8, 10, 0, 10, 11, 0, 9, 11, 1, 10, 11, 1, 9, 11, 0,
                8, 12, 2, 8, 9, 2, 8, 12, 0, 12, 13, 0, 9, 13, 2, 9, 13, 2, 12, 13, 3, 8, 10, 3, 8,
                12, 0, 12, 14, 0, 10, 14, 3, 12, 14, 3, 10, 14, 1, 8, 16, 2, 8, 16, 1, 9, 17, 2, 9,
                17, 1, 16, 17, 2, 16, 17, 3, 8, 16, 1, 10, 18, 1, 16, 18, 3, 16, 18, 3, 10, 18, 2,
                16, 20, 3, 16, 20, 2, 12, 20, 3, 12, 20, 0, 14, 15, 0, 13, 15, 5, 12, 13, 5, 12,
                14, 5, 14, 15, 5, 13, 15, 0, 11, 15, 6, 10, 11, 6, 10, 14, 6, 14, 15, 6, 11, 15, 7,
                9, 11, 7, 9, 13, 7, 13, 15, 7, 11, 15, 1, 11, 19, 1, 18, 19, 6, 10, 18, 6, 18, 19,
                6, 11, 19, 7, 9, 17, 1, 17, 19, 7, 17, 19, 7, 11, 19, 2, 17, 21, 2, 13, 21, 7, 17,
                21, 7, 13, 21, 4, 16, 17, 4, 16, 18, 4, 18, 19, 4, 17, 19, 4, 16, 20, 2, 20, 21, 4,
                20, 21, 4, 17, 21, 3, 20, 22, 3, 18, 22, 4, 20, 22, 4, 18, 22, 5, 12, 20, 5, 20,
                21, 5, 13, 21, 3, 14, 22, 5, 20, 22, 5, 14, 22, 6, 18, 22, 6, 14, 22, 4, 22, 23, 4,
                21, 23, 5, 22, 23, 5, 21, 23, 4, 19, 23, 6, 22, 23, 6, 19, 23, 7, 21, 23, 7, 19,
                23, 5, 15, 23, 6, 15, 23, 7, 15, 23,
            ],
            Polychoron::Cell24Rectified => vec![unimplemented!()],
            Polychoron::Cell120 => vec![
                25, 153, 305, 401, 585, 27, 155, 307, 403, 587, 17, 305, 307, 401, 403, 137, 139,
                321, 425, 427, 25, 137, 425, 553, 585, 27, 139, 427, 555, 587, 17, 385, 401, 553,
                585, 17, 385, 403, 555, 587, 137, 139, 385, 553, 555, 27, 155, 225, 321, 427, 25,
                153, 225, 321, 425, 153, 155, 225, 305, 307, 29, 157, 305, 401, 589, 25, 121, 409,
                537, 585, 121, 125, 401, 585, 589, 29, 125, 413, 541, 589, 121, 125, 377, 537, 541,
                20, 314, 377, 413, 541, 20, 312, 377, 409, 537, 29, 157, 218, 314, 413, 20, 216,
                218, 312, 314, 25, 153, 216, 312, 409, 153, 157, 216, 218, 305, 31, 159, 307, 403,
                591, 31, 159, 219, 315, 415, 27, 123, 411, 539, 587, 21, 313, 379, 411, 539, 123,
                127, 403, 587, 591, 21, 315, 379, 415, 543, 31, 127, 415, 543, 591, 123, 127, 379,
                539, 543, 21, 217, 219, 313, 315, 27, 155, 217, 313, 411, 155, 159, 217, 219, 307,
                31, 159, 227, 323, 431, 17, 387, 401, 557, 589, 17, 387, 403, 559, 591, 29, 141,
                429, 557, 589, 31, 143, 431, 559, 591, 141, 143, 323, 429, 431, 141, 143, 387, 557,
                559, 29, 157, 227, 323, 429, 157, 159, 227, 305, 307, 94, 95, 315, 414, 415, 31,
                95, 415, 431, 575, 1, 323, 395, 431, 575, 94, 95, 395, 574, 575, 1, 322, 395, 430,
                574, 30, 94, 414, 430, 574, 1, 226, 227, 322, 323, 30, 158, 226, 322, 430, 30, 158,
                219, 315, 414, 158, 159, 219, 226, 227, 73, 137, 425, 521, 569, 75, 139, 427, 523,
                571, 75, 203, 297, 393, 571, 137, 139, 369, 521, 523, 73, 201, 273, 369, 521, 75,
                203, 273, 369, 523, 201, 203, 273, 296, 297, 73, 201, 296, 392, 569, 0, 296, 297,
                392, 393, 0, 321, 393, 427, 571, 0, 321, 392, 425, 569, 41, 121, 489, 553, 585, 41,
                137, 457, 521, 553, 57, 121, 441, 489, 537, 73, 105, 457, 473, 521, 57, 105, 441,
                473, 505, 41, 105, 441, 457, 489, 73, 89, 473, 505, 569, 57, 89, 409, 505, 537, 25,
                89, 409, 425, 569, 59, 91, 411, 507, 539, 43, 123, 491, 555, 587, 75, 91, 475, 507,
                571, 43, 139, 459, 523, 555, 59, 123, 443, 491, 539, 75, 107, 459, 475, 523, 59,
                107, 443, 475, 507, 43, 107, 443, 459, 491, 27, 91, 411, 427, 571, 21, 282, 283,
                378, 379, 90, 91, 361, 506, 507, 59, 187, 283, 379, 539, 59, 187, 265, 361, 507,
                186, 187, 265, 282, 283, 58, 186, 265, 361, 506, 58, 186, 282, 378, 538, 58, 90,
                410, 506, 538, 21, 313, 378, 410, 538, 90, 91, 313, 410, 411, 17, 289, 291, 385,
                387, 45, 125, 493, 557, 589, 41, 169, 289, 385, 553, 121, 125, 353, 489, 493, 45,
                173, 291, 387, 557, 41, 169, 257, 353, 489, 169, 173, 257, 289, 291, 45, 173, 257,
                353, 493, 47, 127, 495, 559, 591, 43, 171, 289, 385, 555, 123, 127, 355, 491, 495,
                47, 175, 291, 387, 559, 43, 171, 259, 355, 491, 171, 175, 259, 289, 291, 47, 175,
                259, 355, 495, 63, 95, 415, 511, 543, 63, 191, 283, 379, 543, 63, 191, 267, 363,
                511, 62, 190, 267, 363, 510, 190, 191, 267, 282, 283, 94, 95, 363, 510, 511, 62,
                190, 282, 378, 542, 62, 94, 414, 510, 542, 21, 315, 378, 414, 542, 77, 141, 429,
                525, 573, 61, 125, 445, 493, 541, 45, 141, 461, 525, 557, 45, 109, 445, 461, 493,
                61, 109, 445, 477, 509, 77, 109, 461, 477, 525, 77, 93, 477, 509, 573, 61, 93, 413,
                509, 541, 29, 93, 413, 429, 573, 79, 143, 431, 527, 575, 63, 127, 447, 495, 543,
                47, 143, 463, 527, 559, 47, 111, 447, 463, 495, 63, 111, 447, 479, 511, 79, 111,
                463, 479, 527, 79, 95, 479, 511, 575, 141, 143, 371, 525, 527, 77, 205, 275, 371,
                525, 79, 207, 275, 371, 527, 205, 207, 275, 298, 299, 79, 207, 299, 395, 575, 77,
                205, 298, 394, 573, 1, 298, 299, 394, 395, 1, 323, 394, 429, 573, 75, 203, 251,
                347, 475, 13, 347, 361, 475, 507, 13, 250, 251, 346, 347, 13, 346, 361, 474, 506,
                74, 202, 250, 346, 474, 202, 203, 250, 251, 297, 74, 90, 474, 506, 570, 74, 202,
                297, 393, 570, 90, 91, 393, 570, 571, 9, 337, 369, 457, 521, 9, 339, 369, 459, 523,
                41, 169, 241, 337, 457, 43, 171, 243, 339, 459, 169, 171, 241, 243, 289, 9, 241,
                243, 337, 339, 57, 185, 233, 329, 441, 5, 329, 353, 441, 489, 5, 333, 353, 445,
                493, 61, 189, 237, 333, 445, 5, 233, 237, 329, 333, 185, 189, 233, 237, 281, 61,
                189, 281, 377, 541, 57, 185, 281, 377, 537, 59, 187, 235, 331, 443, 7, 331, 355,
                443, 491, 7, 335, 355, 447, 495, 63, 191, 239, 335, 447, 7, 235, 239, 331, 335,
                187, 191, 235, 239, 283, 173, 175, 245, 247, 291, 45, 173, 245, 341, 461, 47, 175,
                247, 343, 463, 11, 341, 371, 461, 525, 11, 343, 371, 463, 527, 11, 245, 247, 341,
                343, 9, 273, 277, 369, 373, 105, 113, 345, 473, 481, 105, 113, 337, 457, 465, 81,
                209, 277, 373, 529, 81, 113, 465, 481, 529, 9, 337, 373, 465, 529, 81, 209, 249,
                345, 481, 201, 209, 249, 273, 277, 73, 201, 249, 345, 473, 107, 115, 347, 475, 483,
                107, 115, 339, 459, 467, 83, 211, 277, 373, 531, 83, 115, 467, 483, 531, 9, 339,
                373, 467, 531, 83, 211, 251, 347, 483, 203, 211, 251, 273, 277, 105, 113, 329, 441,
                449, 65, 193, 233, 329, 449, 65, 113, 449, 481, 513, 65, 193, 268, 364, 513, 12,
                345, 364, 481, 513, 185, 193, 233, 264, 268, 12, 264, 268, 360, 364, 12, 345, 360,
                473, 505, 57, 185, 264, 360, 505, 107, 115, 331, 443, 451, 67, 195, 235, 331, 451,
                67, 115, 451, 483, 515, 67, 195, 269, 365, 515, 13, 347, 365, 483, 515, 187, 195,
                235, 265, 269, 13, 265, 269, 361, 365, 169, 177, 241, 257, 261, 5, 257, 261, 353,
                357, 5, 329, 357, 449, 497, 49, 113, 449, 465, 497, 49, 177, 261, 357, 497, 49,
                177, 241, 337, 465, 171, 179, 243, 259, 263, 7, 259, 263, 355, 359, 7, 331, 359,
                451, 499, 51, 115, 451, 467, 499, 51, 179, 263, 359, 499, 51, 179, 243, 339, 467,
                173, 181, 245, 257, 261, 175, 183, 247, 259, 263, 181, 183, 245, 247, 295, 177,
                181, 261, 293, 295, 179, 183, 263, 293, 295, 177, 179, 241, 243, 293, 109, 117,
                333, 445, 453, 109, 117, 341, 461, 469, 5, 333, 357, 453, 501, 53, 181, 245, 341,
                469, 53, 181, 261, 357, 501, 53, 117, 453, 469, 501, 111, 119, 335, 447, 455, 111,
                119, 343, 463, 471, 7, 335, 359, 455, 503, 55, 183, 247, 343, 471, 55, 183, 263,
                359, 503, 55, 119, 455, 471, 503, 109, 117, 349, 477, 485, 69, 197, 237, 333, 453,
                69, 117, 453, 485, 517, 69, 197, 270, 366, 517, 14, 349, 366, 485, 517, 14, 266,
                270, 362, 366, 189, 197, 237, 266, 270, 14, 349, 362, 477, 509, 61, 189, 266, 362,
                509, 111, 119, 351, 479, 487, 71, 199, 239, 335, 455, 15, 351, 367, 487, 519, 71,
                199, 271, 367, 519, 71, 119, 455, 487, 519, 15, 267, 271, 363, 367, 191, 199, 239,
                267, 271, 15, 351, 363, 479, 511, 11, 275, 279, 371, 375, 11, 341, 375, 469, 533,
                85, 117, 469, 485, 533, 85, 213, 279, 375, 533, 85, 213, 253, 349, 485, 205, 213,
                253, 275, 279, 77, 205, 253, 349, 477, 11, 343, 375, 471, 535, 87, 215, 255, 351,
                487, 87, 119, 471, 487, 535, 87, 215, 279, 375, 535, 207, 215, 255, 275, 279, 79,
                207, 255, 351, 479, 144, 146, 388, 560, 562, 50, 178, 292, 388, 562, 48, 176, 292,
                388, 560, 50, 146, 466, 530, 562, 48, 144, 464, 528, 560, 144, 146, 372, 528, 530,
                176, 178, 240, 242, 292, 50, 178, 242, 338, 466, 48, 176, 240, 336, 464, 8, 338,
                372, 466, 530, 8, 336, 372, 464, 528, 8, 240, 242, 336, 338, 65, 129, 449, 497,
                545, 129, 133, 357, 497, 501, 69, 133, 453, 501, 549, 129, 133, 381, 545, 549, 69,
                197, 285, 381, 549, 65, 193, 285, 381, 545, 193, 197, 233, 237, 285, 67, 131, 451,
                499, 547, 67, 195, 287, 383, 547, 131, 135, 359, 499, 503, 71, 199, 287, 383, 551,
                71, 135, 455, 503, 551, 131, 135, 383, 547, 551, 195, 199, 235, 239, 287, 53, 181,
                295, 391, 565, 55, 183, 295, 391, 567, 53, 149, 469, 533, 565, 55, 151, 471, 535,
                567, 149, 151, 375, 533, 535, 149, 151, 391, 565, 567, 102, 103, 367, 518, 519, 87,
                103, 487, 519, 583, 87, 215, 303, 399, 583, 102, 103, 399, 582, 583, 86, 214, 303,
                399, 582, 86, 102, 486, 518, 582, 214, 215, 254, 255, 303, 86, 214, 254, 350, 486,
                15, 350, 367, 486, 518, 15, 254, 255, 350, 351, 81, 145, 433, 529, 577, 83, 147,
                435, 531, 579, 2, 325, 397, 435, 579, 145, 147, 325, 433, 435, 2, 325, 396, 433,
                577, 2, 300, 301, 396, 397, 145, 147, 373, 529, 531, 83, 211, 301, 397, 579, 81,
                209, 300, 396, 577, 209, 211, 277, 300, 301, 49, 129, 497, 561, 593, 33, 145, 433,
                561, 593, 33, 129, 417, 545, 593, 33, 97, 417, 433, 577, 65, 97, 417, 513, 545, 49,
                145, 465, 529, 561, 81, 97, 481, 513, 577, 67, 99, 419, 515, 547, 51, 131, 499,
                563, 595, 35, 99, 419, 435, 579, 35, 147, 435, 563, 595, 35, 131, 419, 547, 595,
                51, 147, 467, 531, 563, 83, 99, 483, 515, 579, 23, 286, 287, 382, 383, 98, 99, 317,
                418, 419, 23, 317, 383, 419, 547, 23, 317, 382, 418, 546, 66, 98, 418, 514, 546,
                66, 194, 286, 382, 546, 98, 99, 365, 514, 515, 194, 195, 269, 286, 287, 66, 194,
                269, 365, 514, 19, 293, 295, 389, 391, 53, 133, 501, 565, 597, 19, 389, 405, 561,
                593, 129, 133, 405, 593, 597, 19, 391, 405, 565, 597, 49, 177, 293, 389, 561, 55,
                135, 503, 567, 599, 19, 389, 407, 563, 595, 131, 135, 407, 595, 599, 19, 391, 407,
                567, 599, 51, 179, 293, 389, 563, 71, 103, 423, 519, 551, 23, 319, 383, 423, 551,
                102, 103, 319, 422, 423, 23, 319, 382, 422, 550, 70, 102, 422, 518, 550, 70, 198,
                286, 382, 550, 70, 198, 271, 367, 518, 198, 199, 271, 286, 287, 85, 149, 437, 533,
                581, 37, 133, 421, 549, 597, 37, 149, 437, 565, 597, 37, 101, 421, 437, 581, 69,
                101, 421, 517, 549, 85, 101, 485, 517, 581, 87, 151, 439, 535, 583, 39, 135, 423,
                551, 599, 39, 151, 439, 567, 599, 39, 103, 423, 439, 583, 149, 151, 327, 437, 439,
                3, 327, 399, 439, 583, 3, 327, 398, 437, 581, 3, 302, 303, 398, 399, 85, 213, 302,
                398, 581, 213, 215, 279, 302, 303, 35, 163, 229, 325, 435, 35, 163, 221, 317, 419,
                162, 163, 221, 228, 229, 34, 162, 221, 317, 418, 34, 162, 228, 324, 434, 2, 228,
                229, 324, 325, 34, 98, 418, 434, 578, 2, 324, 397, 434, 578, 98, 99, 397, 578, 579,
                33, 161, 309, 405, 593, 35, 163, 311, 407, 595, 19, 309, 311, 405, 407, 161, 163,
                229, 309, 311, 33, 161, 229, 325, 433, 145, 147, 389, 561, 563, 37, 165, 309, 405,
                597, 161, 165, 220, 222, 309, 37, 165, 222, 318, 421, 22, 220, 222, 316, 318, 33,
                161, 220, 316, 417, 22, 318, 381, 421, 549, 22, 316, 381, 417, 545, 39, 167, 311,
                407, 599, 163, 167, 221, 223, 311, 39, 167, 223, 319, 423, 23, 221, 223, 317, 319,
                165, 167, 231, 309, 311, 39, 167, 231, 327, 439, 37, 165, 231, 327, 437, 166, 167,
                223, 230, 231, 164, 165, 222, 230, 231, 164, 166, 230, 308, 310, 162, 166, 221,
                223, 310, 160, 164, 220, 222, 308, 160, 162, 228, 308, 310, 160, 161, 220, 228,
                229, 3, 230, 231, 326, 327, 38, 166, 230, 326, 438, 38, 166, 223, 319, 422, 3, 326,
                399, 438, 582, 38, 102, 422, 438, 582, 36, 164, 230, 326, 436, 36, 164, 222, 318,
                420, 3, 326, 398, 436, 580, 36, 100, 420, 436, 580, 100, 101, 318, 420, 421, 100,
                101, 398, 580, 581, 38, 166, 310, 406, 598, 36, 164, 308, 404, 596, 18, 308, 310,
                404, 406, 148, 150, 326, 436, 438, 38, 150, 438, 566, 598, 36, 148, 436, 564, 596,
                18, 390, 406, 566, 598, 18, 390, 404, 564, 596, 148, 150, 390, 564, 566, 34, 162,
                310, 406, 594, 38, 134, 422, 550, 598, 130, 134, 406, 594, 598, 34, 130, 418, 546,
                594, 130, 134, 382, 546, 550, 32, 160, 308, 404, 592, 32, 160, 220, 316, 416, 36,
                132, 420, 548, 596, 22, 318, 380, 420, 548, 128, 132, 404, 592, 596, 22, 316, 380,
                416, 544, 32, 128, 416, 544, 592, 128, 132, 380, 544, 548, 32, 160, 228, 324, 432,
                18, 388, 406, 562, 594, 18, 388, 404, 560, 592, 34, 146, 434, 562, 594, 32, 144,
                432, 560, 592, 144, 146, 324, 432, 434, 96, 97, 316, 416, 417, 32, 96, 416, 432,
                576, 2, 324, 396, 432, 576, 96, 97, 396, 576, 577, 86, 150, 438, 534, 582, 84, 148,
                436, 532, 580, 84, 212, 302, 398, 580, 148, 150, 374, 532, 534, 212, 214, 278, 302,
                303, 86, 214, 278, 374, 534, 84, 212, 278, 374, 532, 54, 134, 502, 566, 598, 54,
                150, 470, 534, 566, 70, 134, 454, 502, 550, 86, 118, 470, 486, 534, 70, 118, 454,
                486, 518, 54, 118, 454, 470, 502, 68, 100, 420, 516, 548, 52, 132, 500, 564, 596,
                84, 100, 484, 516, 580, 52, 148, 468, 532, 564, 68, 132, 452, 500, 548, 84, 116,
                468, 484, 532, 68, 116, 452, 484, 516, 52, 116, 452, 468, 500, 22, 284, 285, 380,
                381, 100, 101, 366, 516, 517, 68, 196, 284, 380, 548, 68, 196, 270, 366, 516, 196,
                197, 270, 284, 285, 18, 292, 294, 388, 390, 50, 130, 498, 562, 594, 54, 182, 294,
                390, 566, 130, 134, 358, 498, 502, 54, 182, 262, 358, 502, 178, 182, 262, 292, 294,
                50, 178, 262, 358, 498, 48, 128, 496, 560, 592, 52, 180, 294, 390, 564, 128, 132,
                356, 496, 500, 52, 180, 260, 356, 500, 176, 180, 260, 292, 294, 48, 176, 260, 356,
                496, 64, 96, 416, 512, 544, 64, 192, 284, 380, 544, 96, 97, 364, 512, 513, 192,
                193, 268, 284, 285, 64, 192, 268, 364, 512, 82, 146, 434, 530, 578, 66, 130, 450,
                498, 546, 82, 98, 482, 514, 578, 50, 114, 450, 466, 498, 66, 114, 450, 482, 514,
                82, 114, 466, 482, 530, 80, 144, 432, 528, 576, 64, 128, 448, 496, 544, 80, 96,
                480, 512, 576, 48, 112, 448, 464, 496, 64, 112, 448, 480, 512, 80, 112, 464, 480,
                528, 82, 210, 301, 397, 578, 80, 208, 300, 396, 576, 82, 210, 276, 372, 530, 80,
                208, 276, 372, 528, 208, 210, 276, 300, 301, 212, 213, 252, 253, 302, 84, 212, 252,
                348, 484, 14, 348, 366, 484, 516, 14, 252, 253, 348, 349, 10, 342, 374, 470, 534,
                10, 340, 374, 468, 532, 54, 182, 246, 342, 470, 52, 180, 244, 340, 468, 180, 182,
                244, 246, 294, 10, 244, 246, 340, 342, 70, 198, 238, 334, 454, 6, 334, 358, 454,
                502, 194, 198, 234, 238, 286, 6, 330, 358, 450, 498, 66, 194, 234, 330, 450, 6,
                234, 238, 330, 334, 68, 196, 236, 332, 452, 4, 332, 356, 452, 500, 192, 196, 232,
                236, 284, 4, 328, 356, 448, 496, 64, 192, 232, 328, 448, 4, 232, 236, 328, 332, 13,
                346, 365, 482, 514, 82, 210, 250, 346, 482, 210, 211, 250, 251, 301, 12, 344, 364,
                480, 512, 80, 208, 248, 344, 480, 208, 209, 248, 249, 300, 12, 248, 249, 344, 345,
                206, 214, 254, 274, 278, 204, 212, 252, 274, 278, 206, 207, 254, 255, 299, 204,
                205, 252, 253, 298, 204, 206, 274, 298, 299, 10, 274, 278, 370, 374, 110, 118, 350,
                478, 486, 110, 118, 342, 462, 470, 78, 206, 254, 350, 478, 10, 342, 370, 462, 526,
                78, 206, 274, 370, 526, 78, 110, 462, 478, 526, 108, 116, 348, 476, 484, 108, 116,
                340, 460, 468, 76, 204, 252, 348, 476, 10, 340, 370, 460, 524, 76, 204, 274, 370,
                524, 76, 108, 460, 476, 524, 110, 118, 334, 446, 454, 190, 198, 238, 267, 271, 15,
                350, 363, 478, 510, 62, 190, 238, 334, 446, 62, 110, 446, 478, 510, 108, 116, 332,
                444, 452, 188, 196, 236, 266, 270, 14, 348, 362, 476, 508, 60, 188, 236, 332, 444,
                60, 108, 444, 476, 508, 60, 188, 266, 362, 508, 174, 182, 246, 258, 262, 6, 258,
                262, 354, 358, 46, 174, 246, 342, 462, 6, 334, 354, 446, 494, 46, 110, 446, 462,
                494, 46, 174, 258, 354, 494, 172, 180, 244, 256, 260, 4, 256, 260, 352, 356, 44,
                172, 244, 340, 460, 4, 332, 352, 444, 492, 44, 108, 444, 460, 492, 44, 172, 256,
                352, 492, 186, 194, 234, 265, 269, 186, 190, 234, 238, 282, 184, 192, 232, 264,
                268, 184, 188, 232, 236, 280, 188, 189, 266, 280, 281, 184, 185, 264, 280, 281,
                170, 178, 242, 258, 262, 168, 176, 240, 256, 260, 172, 174, 244, 246, 290, 168,
                170, 240, 242, 288, 170, 174, 258, 288, 290, 168, 172, 256, 288, 290, 106, 114,
                330, 442, 450, 106, 114, 338, 458, 466, 6, 330, 354, 442, 490, 42, 170, 242, 338,
                458, 42, 170, 258, 354, 490, 42, 106, 442, 458, 490, 104, 112, 328, 440, 448, 104,
                112, 336, 456, 464, 4, 328, 352, 440, 488, 40, 168, 240, 336, 456, 40, 168, 256,
                352, 488, 40, 104, 440, 456, 488, 106, 114, 346, 474, 482, 58, 186, 234, 330, 442,
                58, 106, 442, 474, 506, 104, 112, 344, 472, 480, 56, 184, 232, 328, 440, 12, 344,
                360, 472, 504, 56, 184, 264, 360, 504, 56, 104, 440, 472, 504, 8, 272, 276, 368,
                372, 202, 210, 250, 272, 276, 8, 338, 368, 458, 522, 74, 106, 458, 474, 522, 74,
                202, 272, 368, 522, 200, 208, 248, 272, 276, 8, 336, 368, 456, 520, 72, 200, 248,
                344, 472, 72, 104, 456, 472, 520, 72, 200, 272, 368, 520, 200, 201, 248, 249, 296,
                200, 202, 272, 296, 297, 78, 206, 299, 395, 574, 78, 94, 478, 510, 574, 76, 204,
                298, 394, 572, 76, 92, 476, 508, 572, 92, 93, 362, 508, 509, 92, 93, 394, 572, 573,
                140, 142, 370, 524, 526, 46, 142, 462, 526, 558, 44, 140, 460, 524, 556, 46, 174,
                290, 386, 558, 44, 172, 290, 386, 556, 140, 142, 386, 556, 558, 62, 126, 446, 494,
                542, 122, 126, 354, 490, 494, 58, 122, 442, 490, 538, 122, 126, 378, 538, 542, 60,
                124, 444, 492, 540, 60, 188, 280, 376, 540, 120, 124, 352, 488, 492, 56, 184, 280,
                376, 536, 56, 120, 440, 488, 536, 120, 124, 376, 536, 540, 42, 170, 288, 384, 554,
                40, 168, 288, 384, 552, 42, 138, 458, 522, 554, 40, 136, 456, 520, 552, 136, 138,
                368, 520, 522, 136, 138, 384, 552, 554, 88, 89, 360, 504, 505, 72, 88, 472, 504,
                568, 72, 200, 296, 392, 568, 88, 89, 392, 568, 569, 78, 142, 430, 526, 574, 76,
                140, 428, 524, 572, 1, 322, 394, 428, 572, 140, 142, 322, 428, 430, 46, 126, 494,
                558, 590, 30, 142, 430, 558, 590, 30, 126, 414, 542, 590, 60, 92, 412, 508, 540,
                44, 124, 492, 556, 588, 28, 92, 412, 428, 572, 28, 140, 428, 556, 588, 28, 124,
                412, 540, 588, 20, 280, 281, 376, 377, 92, 93, 314, 412, 413, 20, 314, 376, 412,
                540, 16, 288, 290, 384, 386, 42, 122, 490, 554, 586, 16, 386, 402, 558, 590, 122,
                126, 402, 586, 590, 16, 384, 402, 554, 586, 40, 120, 488, 552, 584, 16, 386, 400,
                556, 588, 120, 124, 400, 584, 588, 16, 384, 400, 552, 584, 56, 88, 408, 504, 536,
                20, 312, 376, 408, 536, 88, 89, 312, 408, 409, 74, 138, 426, 522, 570, 26, 122,
                410, 538, 586, 26, 138, 426, 554, 586, 26, 90, 410, 426, 570, 72, 136, 424, 520,
                568, 24, 120, 408, 536, 584, 24, 136, 424, 552, 584, 24, 88, 408, 424, 568, 136,
                138, 320, 424, 426, 0, 320, 393, 426, 570, 0, 320, 392, 424, 568, 28, 156, 226,
                322, 428, 28, 156, 218, 314, 412, 156, 157, 218, 226, 227, 30, 158, 306, 402, 590,
                28, 156, 304, 400, 588, 16, 304, 306, 400, 402, 156, 158, 226, 304, 306, 26, 154,
                306, 402, 586, 26, 154, 217, 313, 410, 154, 158, 217, 219, 306, 24, 152, 304, 400,
                584, 24, 152, 216, 312, 408, 152, 156, 216, 218, 304, 26, 154, 224, 320, 426, 24,
                152, 224, 320, 424, 152, 154, 224, 304, 306, 0, 224, 225, 320, 321, 154, 155, 217,
                224, 225, 152, 153, 216, 224, 225,
            ],
            Polychoron::Cell600 => vec![
                0, 48, 50, 0, 48, 64, 0, 50, 64, 48, 50, 64, 0, 48, 66, 0, 50, 66, 48, 50, 66, 0,
                48, 80, 0, 64, 80, 48, 64, 80, 0, 48, 82, 0, 66, 82, 48, 66, 82, 0, 80, 82, 48, 80,
                82, 0, 50, 83, 0, 64, 83, 50, 64, 83, 0, 50, 86, 0, 66, 86, 50, 66, 86, 0, 83, 86,
                50, 83, 86, 0, 51, 54, 0, 51, 67, 0, 54, 67, 51, 54, 67, 0, 51, 70, 0, 54, 70, 51,
                54, 70, 0, 51, 80, 0, 67, 80, 51, 67, 80, 0, 51, 82, 0, 70, 82, 51, 70, 82, 51, 80,
                82, 0, 54, 83, 0, 67, 83, 54, 67, 83, 0, 54, 86, 0, 70, 86, 54, 70, 86, 54, 83, 86,
                0, 64, 67, 64, 67, 80, 64, 67, 83, 0, 66, 70, 66, 70, 82, 66, 70, 86, 1, 49, 52, 1,
                49, 65, 1, 52, 65, 49, 52, 65, 1, 49, 68, 1, 52, 68, 49, 52, 68, 1, 49, 81, 1, 65,
                81, 49, 65, 81, 1, 49, 84, 1, 68, 84, 49, 68, 84, 1, 81, 84, 49, 81, 84, 1, 52, 85,
                1, 65, 85, 52, 65, 85, 1, 52, 87, 1, 68, 87, 52, 68, 87, 1, 85, 87, 52, 85, 87, 1,
                53, 55, 1, 53, 69, 1, 55, 69, 53, 55, 69, 1, 53, 71, 1, 55, 71, 53, 55, 71, 1, 53,
                81, 1, 69, 81, 53, 69, 81, 1, 53, 84, 1, 71, 84, 53, 71, 84, 53, 81, 84, 1, 55, 85,
                1, 69, 85, 55, 69, 85, 1, 55, 87, 1, 71, 87, 55, 71, 87, 55, 85, 87, 1, 65, 69, 65,
                69, 81, 65, 69, 85, 1, 68, 71, 68, 71, 84, 68, 71, 87, 2, 24, 27, 2, 24, 88, 2, 27,
                88, 24, 27, 88, 2, 24, 89, 2, 27, 89, 24, 27, 89, 2, 24, 56, 2, 24, 57, 2, 56, 57,
                24, 56, 57, 2, 56, 88, 24, 56, 88, 2, 57, 89, 24, 57, 89, 2, 26, 30, 2, 26, 91, 2,
                30, 91, 26, 30, 91, 2, 26, 93, 2, 30, 93, 26, 30, 93, 2, 26, 56, 2, 26, 57, 26, 56,
                57, 2, 56, 91, 26, 56, 91, 2, 57, 93, 26, 57, 93, 2, 27, 59, 2, 27, 61, 2, 59, 61,
                27, 59, 61, 2, 59, 88, 27, 59, 88, 2, 61, 89, 27, 61, 89, 2, 30, 59, 2, 30, 61, 30,
                59, 61, 2, 59, 91, 30, 59, 91, 2, 61, 93, 30, 61, 93, 2, 88, 91, 56, 88, 91, 2, 89,
                93, 57, 89, 93, 59, 88, 91, 61, 89, 93, 3, 25, 29, 3, 25, 90, 3, 29, 90, 25, 29,
                90, 3, 25, 92, 3, 29, 92, 25, 29, 92, 3, 25, 58, 3, 25, 60, 3, 58, 60, 25, 58, 60,
                3, 58, 90, 25, 58, 90, 3, 60, 92, 25, 60, 92, 3, 28, 31, 3, 28, 94, 3, 31, 94, 28,
                31, 94, 3, 28, 95, 3, 31, 95, 28, 31, 95, 3, 28, 58, 3, 28, 60, 28, 58, 60, 3, 58,
                94, 28, 58, 94, 3, 60, 95, 28, 60, 95, 3, 29, 62, 3, 29, 63, 3, 62, 63, 29, 62, 63,
                3, 62, 90, 29, 62, 90, 3, 63, 92, 29, 63, 92, 3, 31, 62, 3, 31, 63, 31, 62, 63, 3,
                62, 94, 31, 62, 94, 3, 63, 95, 31, 63, 95, 3, 90, 94, 58, 90, 94, 3, 92, 95, 60,
                92, 95, 62, 90, 94, 63, 92, 95, 4, 16, 17, 4, 16, 32, 4, 17, 32, 16, 17, 32, 4, 16,
                33, 4, 17, 33, 16, 17, 33, 4, 16, 96, 4, 32, 96, 16, 32, 96, 4, 16, 97, 4, 33, 97,
                16, 33, 97, 4, 96, 97, 16, 96, 97, 4, 17, 98, 4, 32, 98, 17, 32, 98, 4, 17, 100, 4,
                33, 100, 17, 33, 100, 4, 98, 100, 17, 98, 100, 4, 19, 21, 4, 19, 35, 4, 21, 35, 19,
                21, 35, 4, 19, 37, 4, 21, 37, 19, 21, 37, 4, 19, 96, 4, 35, 96, 19, 35, 96, 4, 19,
                97, 4, 37, 97, 19, 37, 97, 19, 96, 97, 4, 21, 98, 4, 35, 98, 21, 35, 98, 4, 21,
                100, 4, 37, 100, 21, 37, 100, 21, 98, 100, 4, 32, 35, 32, 35, 96, 32, 35, 98, 4,
                33, 37, 33, 37, 97, 33, 37, 100, 5, 18, 20, 5, 18, 34, 5, 20, 34, 18, 20, 34, 5,
                18, 36, 5, 20, 36, 18, 20, 36, 5, 18, 99, 5, 34, 99, 18, 34, 99, 5, 18, 101, 5, 36,
                101, 18, 36, 101, 5, 99, 101, 18, 99, 101, 5, 20, 102, 5, 34, 102, 20, 34, 102, 5,
                20, 103, 5, 36, 103, 20, 36, 103, 5, 102, 103, 20, 102, 103, 5, 22, 23, 5, 22, 38,
                5, 23, 38, 22, 23, 38, 5, 22, 39, 5, 23, 39, 22, 23, 39, 5, 22, 99, 5, 38, 99, 22,
                38, 99, 5, 22, 101, 5, 39, 101, 22, 39, 101, 22, 99, 101, 5, 23, 102, 5, 38, 102,
                23, 38, 102, 5, 23, 103, 5, 39, 103, 23, 39, 103, 23, 102, 103, 5, 34, 38, 34, 38,
                99, 34, 38, 102, 5, 36, 39, 36, 39, 101, 36, 39, 103, 6, 8, 10, 6, 8, 72, 6, 10,
                72, 8, 10, 72, 6, 8, 73, 6, 10, 73, 8, 10, 73, 6, 8, 40, 6, 8, 41, 6, 40, 41, 8,
                40, 41, 6, 40, 72, 8, 40, 72, 6, 41, 73, 8, 41, 73, 6, 9, 12, 6, 9, 74, 6, 12, 74,
                9, 12, 74, 6, 9, 76, 6, 12, 76, 9, 12, 76, 6, 9, 40, 6, 9, 41, 9, 40, 41, 6, 40,
                74, 9, 40, 74, 6, 41, 76, 9, 41, 76, 6, 10, 42, 6, 10, 44, 6, 42, 44, 10, 42, 44,
                6, 42, 72, 10, 42, 72, 6, 44, 73, 10, 44, 73, 6, 12, 42, 6, 12, 44, 12, 42, 44, 6,
                42, 74, 12, 42, 74, 6, 44, 76, 12, 44, 76, 6, 72, 74, 40, 72, 74, 6, 73, 76, 41,
                73, 76, 42, 72, 74, 44, 73, 76, 7, 11, 14, 7, 11, 75, 7, 14, 75, 11, 14, 75, 7, 11,
                77, 7, 14, 77, 11, 14, 77, 7, 11, 43, 7, 11, 45, 7, 43, 45, 11, 43, 45, 7, 43, 75,
                11, 43, 75, 7, 45, 77, 11, 45, 77, 7, 13, 15, 7, 13, 78, 7, 15, 78, 13, 15, 78, 7,
                13, 79, 7, 15, 79, 13, 15, 79, 7, 13, 43, 7, 13, 45, 13, 43, 45, 7, 43, 78, 13, 43,
                78, 7, 45, 79, 13, 45, 79, 7, 14, 46, 7, 14, 47, 7, 46, 47, 14, 46, 47, 7, 46, 75,
                14, 46, 75, 7, 47, 77, 14, 47, 77, 7, 15, 46, 7, 15, 47, 15, 46, 47, 7, 46, 78, 15,
                46, 78, 7, 47, 79, 15, 47, 79, 7, 75, 78, 43, 75, 78, 7, 77, 79, 45, 77, 79, 46,
                75, 78, 47, 77, 79, 8, 10, 56, 8, 10, 57, 8, 56, 57, 10, 56, 57, 8, 56, 72, 10, 56,
                72, 8, 57, 73, 10, 57, 73, 8, 16, 24, 8, 16, 104, 8, 24, 104, 16, 24, 104, 8, 16,
                105, 8, 24, 105, 16, 24, 105, 8, 16, 40, 8, 16, 41, 16, 40, 41, 8, 40, 104, 16, 40,
                104, 8, 41, 105, 16, 41, 105, 8, 24, 56, 8, 24, 57, 8, 56, 104, 24, 56, 104, 8, 57,
                105, 24, 57, 105, 8, 72, 104, 40, 72, 104, 8, 73, 105, 41, 73, 105, 56, 72, 104,
                57, 73, 105, 9, 12, 58, 9, 12, 60, 9, 58, 60, 12, 58, 60, 9, 58, 74, 12, 58, 74, 9,
                60, 76, 12, 60, 76, 9, 17, 25, 9, 17, 106, 9, 25, 106, 17, 25, 106, 9, 17, 109, 9,
                25, 109, 17, 25, 109, 9, 17, 40, 9, 17, 41, 17, 40, 41, 9, 40, 106, 17, 40, 106, 9,
                41, 109, 17, 41, 109, 9, 25, 58, 9, 25, 60, 9, 58, 106, 25, 58, 106, 9, 60, 109,
                25, 60, 109, 9, 74, 106, 40, 74, 106, 9, 76, 109, 41, 76, 109, 58, 74, 106, 60, 76,
                109, 10, 18, 26, 10, 18, 107, 10, 26, 107, 18, 26, 107, 10, 18, 110, 10, 26, 110,
                18, 26, 110, 10, 18, 42, 10, 18, 44, 18, 42, 44, 10, 42, 107, 18, 42, 107, 10, 44,
                110, 18, 44, 110, 10, 26, 56, 10, 26, 57, 10, 56, 107, 26, 56, 107, 10, 57, 110,
                26, 57, 110, 10, 72, 107, 42, 72, 107, 10, 73, 110, 44, 73, 110, 56, 72, 107, 57,
                73, 110, 11, 14, 59, 11, 14, 61, 11, 59, 61, 14, 59, 61, 11, 59, 75, 14, 59, 75,
                11, 61, 77, 14, 61, 77, 11, 19, 27, 11, 19, 108, 11, 27, 108, 19, 27, 108, 11, 19,
                111, 11, 27, 111, 19, 27, 111, 11, 19, 43, 11, 19, 45, 19, 43, 45, 11, 43, 108, 19,
                43, 108, 11, 45, 111, 19, 45, 111, 11, 27, 59, 11, 27, 61, 11, 59, 108, 27, 59,
                108, 11, 61, 111, 27, 61, 111, 11, 75, 108, 43, 75, 108, 11, 77, 111, 45, 77, 111,
                59, 75, 108, 61, 77, 111, 12, 20, 28, 12, 20, 112, 12, 28, 112, 20, 28, 112, 12,
                20, 115, 12, 28, 115, 20, 28, 115, 12, 20, 42, 12, 20, 44, 20, 42, 44, 12, 42, 112,
                20, 42, 112, 12, 44, 115, 20, 44, 115, 12, 28, 58, 12, 28, 60, 12, 58, 112, 28, 58,
                112, 12, 60, 115, 28, 60, 115, 12, 74, 112, 42, 74, 112, 12, 76, 115, 44, 76, 115,
                58, 74, 112, 60, 76, 115, 13, 15, 62, 13, 15, 63, 13, 62, 63, 15, 62, 63, 13, 62,
                78, 15, 62, 78, 13, 63, 79, 15, 63, 79, 13, 21, 29, 13, 21, 113, 13, 29, 113, 21,
                29, 113, 13, 21, 116, 13, 29, 116, 21, 29, 116, 13, 21, 43, 13, 21, 45, 21, 43, 45,
                13, 43, 113, 21, 43, 113, 13, 45, 116, 21, 45, 116, 13, 29, 62, 13, 29, 63, 13, 62,
                113, 29, 62, 113, 13, 63, 116, 29, 63, 116, 13, 78, 113, 43, 78, 113, 13, 79, 116,
                45, 79, 116, 62, 78, 113, 63, 79, 116, 14, 22, 30, 14, 22, 114, 14, 30, 114, 22,
                30, 114, 14, 22, 117, 14, 30, 117, 22, 30, 117, 14, 22, 46, 14, 22, 47, 22, 46, 47,
                14, 46, 114, 22, 46, 114, 14, 47, 117, 22, 47, 117, 14, 30, 59, 14, 30, 61, 14, 59,
                114, 30, 59, 114, 14, 61, 117, 30, 61, 117, 14, 75, 114, 46, 75, 114, 14, 77, 117,
                47, 77, 117, 59, 75, 114, 61, 77, 117, 15, 23, 31, 15, 23, 118, 15, 31, 118, 23,
                31, 118, 15, 23, 119, 15, 31, 119, 23, 31, 119, 15, 23, 46, 15, 23, 47, 23, 46, 47,
                15, 46, 118, 23, 46, 118, 15, 47, 119, 23, 47, 119, 15, 31, 62, 15, 31, 63, 15, 62,
                118, 31, 62, 118, 15, 63, 119, 31, 63, 119, 15, 78, 118, 46, 78, 118, 15, 79, 119,
                47, 79, 119, 62, 78, 118, 63, 79, 119, 16, 17, 40, 16, 32, 40, 17, 32, 40, 16, 17,
                41, 16, 33, 41, 17, 33, 41, 16, 24, 96, 16, 24, 97, 24, 96, 97, 16, 96, 104, 24,
                96, 104, 16, 97, 105, 24, 97, 105, 16, 32, 104, 32, 40, 104, 32, 96, 104, 16, 33,
                105, 33, 41, 105, 33, 97, 105, 17, 25, 98, 17, 25, 100, 25, 98, 100, 17, 98, 106,
                25, 98, 106, 17, 100, 109, 25, 100, 109, 17, 32, 106, 32, 40, 106, 32, 98, 106, 17,
                33, 109, 33, 41, 109, 33, 100, 109, 18, 20, 42, 18, 34, 42, 20, 34, 42, 18, 20, 44,
                18, 36, 44, 20, 36, 44, 18, 26, 99, 18, 26, 101, 26, 99, 101, 18, 99, 107, 26, 99,
                107, 18, 101, 110, 26, 101, 110, 18, 34, 107, 34, 42, 107, 34, 99, 107, 18, 36,
                110, 36, 44, 110, 36, 101, 110, 19, 21, 43, 19, 35, 43, 21, 35, 43, 19, 21, 45, 19,
                37, 45, 21, 37, 45, 19, 27, 96, 19, 27, 97, 27, 96, 97, 19, 96, 108, 27, 96, 108,
                19, 97, 111, 27, 97, 111, 19, 35, 108, 35, 43, 108, 35, 96, 108, 19, 37, 111, 37,
                45, 111, 37, 97, 111, 20, 28, 102, 20, 28, 103, 28, 102, 103, 20, 102, 112, 28,
                102, 112, 20, 103, 115, 28, 103, 115, 20, 34, 112, 34, 42, 112, 34, 102, 112, 20,
                36, 115, 36, 44, 115, 36, 103, 115, 21, 29, 98, 21, 29, 100, 29, 98, 100, 21, 98,
                113, 29, 98, 113, 21, 100, 116, 29, 100, 116, 21, 35, 113, 35, 43, 113, 35, 98,
                113, 21, 37, 116, 37, 45, 116, 37, 100, 116, 22, 23, 46, 22, 38, 46, 23, 38, 46,
                22, 23, 47, 22, 39, 47, 23, 39, 47, 22, 30, 99, 22, 30, 101, 30, 99, 101, 22, 99,
                114, 30, 99, 114, 22, 101, 117, 30, 101, 117, 22, 38, 114, 38, 46, 114, 38, 99,
                114, 22, 39, 117, 39, 47, 117, 39, 101, 117, 23, 31, 102, 23, 31, 103, 31, 102,
                103, 23, 102, 118, 31, 102, 118, 23, 103, 119, 31, 103, 119, 23, 38, 118, 38, 46,
                118, 38, 102, 118, 23, 39, 119, 39, 47, 119, 39, 103, 119, 24, 27, 96, 24, 88, 96,
                27, 88, 96, 24, 27, 97, 24, 89, 97, 27, 89, 97, 24, 88, 104, 56, 88, 104, 24, 89,
                105, 57, 89, 105, 88, 96, 104, 89, 97, 105, 25, 29, 98, 25, 90, 98, 29, 90, 98, 25,
                29, 100, 25, 92, 100, 29, 92, 100, 25, 90, 106, 58, 90, 106, 25, 92, 109, 60, 92,
                109, 90, 98, 106, 92, 100, 109, 26, 30, 99, 26, 91, 99, 30, 91, 99, 26, 30, 101,
                26, 93, 101, 30, 93, 101, 26, 91, 107, 56, 91, 107, 26, 93, 110, 57, 93, 110, 91,
                99, 107, 93, 101, 110, 27, 88, 108, 59, 88, 108, 27, 89, 111, 61, 89, 111, 88, 96,
                108, 89, 97, 111, 28, 31, 102, 28, 94, 102, 31, 94, 102, 28, 31, 103, 28, 95, 103,
                31, 95, 103, 28, 94, 112, 58, 94, 112, 28, 95, 115, 60, 95, 115, 94, 102, 112, 95,
                103, 115, 29, 90, 113, 62, 90, 113, 29, 92, 116, 63, 92, 116, 90, 98, 113, 92, 100,
                116, 30, 91, 114, 59, 91, 114, 30, 93, 117, 61, 93, 117, 91, 99, 114, 93, 101, 117,
                31, 94, 118, 62, 94, 118, 31, 95, 119, 63, 95, 119, 94, 102, 118, 95, 103, 119, 32,
                35, 80, 32, 35, 82, 32, 80, 82, 35, 80, 82, 32, 80, 96, 35, 80, 96, 32, 82, 98, 35,
                82, 98, 32, 40, 48, 32, 48, 104, 40, 48, 104, 32, 48, 106, 40, 48, 106, 32, 48, 80,
                32, 48, 82, 32, 80, 104, 48, 80, 104, 32, 82, 106, 48, 82, 106, 80, 96, 104, 82,
                98, 106, 33, 37, 81, 33, 37, 84, 33, 81, 84, 37, 81, 84, 33, 81, 97, 37, 81, 97,
                33, 84, 100, 37, 84, 100, 33, 41, 49, 33, 49, 105, 41, 49, 105, 33, 49, 109, 41,
                49, 109, 33, 49, 81, 33, 49, 84, 33, 81, 105, 49, 81, 105, 33, 84, 109, 49, 84,
                109, 81, 97, 105, 84, 100, 109, 34, 38, 83, 34, 38, 86, 34, 83, 86, 38, 83, 86, 34,
                83, 99, 38, 83, 99, 34, 86, 102, 38, 86, 102, 34, 42, 50, 34, 50, 107, 42, 50, 107,
                34, 50, 112, 42, 50, 112, 34, 50, 83, 34, 50, 86, 34, 83, 107, 50, 83, 107, 34, 86,
                112, 50, 86, 112, 83, 99, 107, 86, 102, 112, 35, 43, 51, 35, 51, 108, 43, 51, 108,
                35, 51, 113, 43, 51, 113, 35, 51, 80, 35, 51, 82, 35, 80, 108, 51, 80, 108, 35, 82,
                113, 51, 82, 113, 80, 96, 108, 82, 98, 113, 36, 39, 85, 36, 39, 87, 36, 85, 87, 39,
                85, 87, 36, 85, 101, 39, 85, 101, 36, 87, 103, 39, 87, 103, 36, 44, 52, 36, 52,
                110, 44, 52, 110, 36, 52, 115, 44, 52, 115, 36, 52, 85, 36, 52, 87, 36, 85, 110,
                52, 85, 110, 36, 87, 115, 52, 87, 115, 85, 101, 110, 87, 103, 115, 37, 45, 53, 37,
                53, 111, 45, 53, 111, 37, 53, 116, 45, 53, 116, 37, 53, 81, 37, 53, 84, 37, 81,
                111, 53, 81, 111, 37, 84, 116, 53, 84, 116, 81, 97, 111, 84, 100, 116, 38, 46, 54,
                38, 54, 114, 46, 54, 114, 38, 54, 118, 46, 54, 118, 38, 54, 83, 38, 54, 86, 38, 83,
                114, 54, 83, 114, 38, 86, 118, 54, 86, 118, 83, 99, 114, 86, 102, 118, 39, 47, 55,
                39, 55, 117, 47, 55, 117, 39, 55, 119, 47, 55, 119, 39, 55, 85, 39, 55, 87, 39, 85,
                117, 55, 85, 117, 39, 87, 119, 55, 87, 119, 85, 101, 117, 87, 103, 119, 40, 48, 72,
                40, 48, 74, 48, 72, 74, 48, 72, 104, 48, 74, 106, 41, 49, 73, 41, 49, 76, 49, 73,
                76, 49, 73, 105, 49, 76, 109, 42, 50, 72, 42, 50, 74, 50, 72, 74, 50, 72, 107, 50,
                74, 112, 43, 51, 75, 43, 51, 78, 51, 75, 78, 51, 75, 108, 51, 78, 113, 44, 52, 73,
                44, 52, 76, 52, 73, 76, 52, 73, 110, 52, 76, 115, 45, 53, 77, 45, 53, 79, 53, 77,
                79, 53, 77, 111, 53, 79, 116, 46, 54, 75, 46, 54, 78, 54, 75, 78, 54, 75, 114, 54,
                78, 118, 47, 55, 77, 47, 55, 79, 55, 77, 79, 55, 77, 117, 55, 79, 119, 48, 50, 72,
                48, 64, 72, 50, 64, 72, 48, 50, 74, 48, 66, 74, 50, 66, 74, 48, 64, 104, 64, 72,
                104, 64, 80, 104, 48, 66, 106, 66, 74, 106, 66, 82, 106, 49, 52, 73, 49, 65, 73,
                52, 65, 73, 49, 52, 76, 49, 68, 76, 52, 68, 76, 49, 65, 105, 65, 73, 105, 65, 81,
                105, 49, 68, 109, 68, 76, 109, 68, 84, 109, 50, 64, 107, 64, 72, 107, 64, 83, 107,
                50, 66, 112, 66, 74, 112, 66, 86, 112, 51, 54, 75, 51, 67, 75, 54, 67, 75, 51, 54,
                78, 51, 70, 78, 54, 70, 78, 51, 67, 108, 67, 75, 108, 67, 80, 108, 51, 70, 113, 70,
                78, 113, 70, 82, 113, 52, 65, 110, 65, 73, 110, 65, 85, 110, 52, 68, 115, 68, 76,
                115, 68, 87, 115, 53, 55, 77, 53, 69, 77, 55, 69, 77, 53, 55, 79, 53, 71, 79, 55,
                71, 79, 53, 69, 111, 69, 77, 111, 69, 81, 111, 53, 71, 116, 71, 79, 116, 71, 84,
                116, 54, 67, 114, 67, 75, 114, 67, 83, 114, 54, 70, 118, 70, 78, 118, 70, 86, 118,
                55, 69, 117, 69, 77, 117, 69, 85, 117, 55, 71, 119, 71, 79, 119, 71, 87, 119, 56,
                64, 72, 56, 64, 104, 56, 64, 107, 56, 64, 88, 56, 64, 91, 64, 88, 91, 64, 88, 104,
                64, 91, 107, 57, 65, 73, 57, 65, 105, 57, 65, 110, 57, 65, 89, 57, 65, 93, 65, 89,
                93, 65, 89, 105, 65, 93, 110, 58, 66, 74, 58, 66, 106, 58, 66, 112, 58, 66, 90, 58,
                66, 94, 66, 90, 94, 66, 90, 106, 66, 94, 112, 59, 67, 75, 59, 67, 108, 59, 67, 114,
                59, 67, 88, 59, 67, 91, 67, 88, 91, 67, 88, 108, 67, 91, 114, 60, 68, 76, 60, 68,
                109, 60, 68, 115, 60, 68, 92, 60, 68, 95, 68, 92, 95, 68, 92, 109, 68, 95, 115, 61,
                69, 77, 61, 69, 111, 61, 69, 117, 61, 69, 89, 61, 69, 93, 69, 89, 93, 69, 89, 111,
                69, 93, 117, 62, 70, 78, 62, 70, 113, 62, 70, 118, 62, 70, 90, 62, 70, 94, 70, 90,
                94, 70, 90, 113, 70, 94, 118, 63, 71, 79, 63, 71, 116, 63, 71, 119, 63, 71, 92, 63,
                71, 95, 71, 92, 95, 71, 92, 116, 71, 95, 119, 64, 67, 88, 64, 80, 88, 67, 80, 88,
                64, 67, 91, 64, 83, 91, 67, 83, 91, 80, 88, 104, 83, 91, 107, 65, 69, 89, 65, 81,
                89, 69, 81, 89, 65, 69, 93, 65, 85, 93, 69, 85, 93, 81, 89, 105, 85, 93, 110, 66,
                70, 90, 66, 82, 90, 70, 82, 90, 66, 70, 94, 66, 86, 94, 70, 86, 94, 82, 90, 106,
                86, 94, 112, 80, 88, 108, 83, 91, 114, 68, 71, 92, 68, 84, 92, 71, 84, 92, 68, 71,
                95, 68, 87, 95, 71, 87, 95, 84, 92, 109, 87, 95, 115, 81, 89, 111, 85, 93, 117, 82,
                90, 113, 86, 94, 118, 84, 92, 116, 87, 95, 119, 80, 88, 96, 81, 89, 97, 82, 90, 98,
                83, 91, 99, 84, 92, 100, 85, 93, 101, 86, 94, 102, 87, 95, 103,
            ],
        }
    }

    /// The H-representation of a regular polychoron is the list of hyperplanes whose
    /// intersection produces the desired shape. Together, these hyperplanes form
    /// a "boundary" for the shape. We use this representation in order to determine
    /// which faces belong to each of the cells that form the polychoron's surface.
    ///
    /// See: `https://en.wikipedia.org/wiki/Convex_polytope#Intersection_of_half-spaces`
    pub fn get_h_representation(&self) -> Vec<Hyperplane> {
        // By definition, a polychoron's dual has a vertex at the center of each of the
        // "original" polychoron's cells. We can exploit this information in order to find
        // the distance from each of the bounding hyperplanes in this polychoron's H-representation
        // to the origin.
        let displacement = match *self {
            Polychoron::Cell8 => 0.5,
            Polychoron::Cell16 => 0.5,
            Polychoron::Cell24 => FRAC_1_SQRT_2,
            Polychoron::Cell24Rectified => FRAC_1_SQRT_2,
            Polychoron::Cell120 => -0.925615, // See email snippet below as to where this comes from.
            Polychoron::Cell600 => -0.925615,
        };

        // Notes from "T", the author of `http://eusebeia.dyndns.org/`:
        //
        // "One way to determine the correct [hyperplane] scale `d` is to leave the constant
        // term in the hyperplane equation as an unknown and plug in a vertex
        // known to lie on that hyperplane, then solve for the constant. Since the
        // 120-cell and 600-cell are regular polytopes, once you find one constant
        // all the other constants should be equal (by symmetry).
        //
        // Fortunately, if you're using the 600-cell coordinates from my website, 8
        // of them are aligned with the coordinate axes, so you can easily
        // determine the coordinates for at least 8 pairs of dodecahedra in the
        // 120-cell easily: for example, if you choose `<2,0,0,0>` as the normal,
        // then clearly the vertices that lie on the hyperplane perpendicular to it
        // must have the largest first coordinate (since otherwise there would be
        // cells containing points that rise above that hyperplane, implying that
        // the 120-cell is non-convex, which is a contradiction). So, you can sort
        // the vertices of the 120-cell by their first coordinate in descending
        // order, and pick the ones with the largest value (there should be 20 of
        // them if you did it correctly). Then, pick any of them to plug it into the
        // equation to solve for the constant term."

        // Calculate the midpoint of any edge, find its distance to the origin and use this
        // as the displacement?

        let mut bounding_hyperplanes = Vec::new();

        for vertex in self.get_dual().get_vertices().iter() {
            // Note that the normal vectors provided here will be automatically normalized
            // in the constructor.
            bounding_hyperplanes.push(Hyperplane::new(*vertex, displacement));
        }

        bounding_hyperplanes
    }

    /// The V-representation of a polychoron is simple its list of vertices.
    pub fn get_v_representation(&self) -> Vec<Vector4<f32>> {
        self.get_vertices()
    }

    /// Returns the dual of the regular polychoron, which is itself another regular
    /// polychoron with a vertex at the center of each cell of the original polychoron.
    /// A polychoron is self-dual if it is its own dual (such as the 24-cell).
    pub fn get_dual(&self) -> Polychoron {
        match *self {
            Polychoron::Cell8 => Polychoron::Cell16,
            Polychoron::Cell16 => Polychoron::Cell8,
            Polychoron::Cell24 => Polychoron::Cell24Rectified,
            Polychoron::Cell24Rectified => Polychoron::Cell24, // See: `http://eusebeia.dyndns.org/4d/24-cell`
            Polychoron::Cell120 => Polychoron::Cell600,
            Polychoron::Cell600 => Polychoron::Cell120,
        }
    }
}
